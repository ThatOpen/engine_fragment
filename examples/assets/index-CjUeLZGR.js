var tI=Object.defineProperty;var CI=(eE,I,E)=>I in eE?tI(eE,I,{enumerable:!0,configurable:!0,writable:!0,value:E}):eE[I]=E;var O=(eE,I,E)=>(CI(eE,typeof I!="symbol"?I+"":I,E),E);import{I as YE,L as $E,M as g,A as uE,c as sI,d as TI,e as VE,R as BE,f as q,g as yE,h as RI,i as fE,O as xE,j as gE,k as jE,l as JE,V as Z,m as GE,n as HE,o as bE,T as FI,Q as oI,p as qE,q as h,r as pE,s as _E,t as cE,F as iI,u as wE,v as WE,w as zE,x as vE,y as IE,z as AI,D as rI,E as PE,H as nI,J as NI,K as OI,N as XE,P as KE,U as aI,X as SI,Y as cI,Z as LI,_ as lI,$ as PI,a0 as UI,a1 as MI,a2 as DI,a3 as dI,a4 as hI,a5 as uI,a6 as fI,a7 as mI,a8 as GI,a9 as gI,aa as pI,ab as YI,ac as VI,ad as yI,ae as bI,af as BI,ag as xI,ah as HI,ai as _I,aj as wI,ak as WI,al as zI,am as vI,an as XI,ao as KI,ap as QI,aq as $I,ar as jI,as as JI,at as qI,au as kI,av as ZI,aw as Ee,ax as Ie,ay as ee,az as te,aA as Ce,aB as se,aC as Te,aD as Re,aE as Fe,aF as oe,aG as ie,aH as Ae,aI as re,aJ as ne,aK as Ne,aL as Oe,aM as ae,aN as Se,aO as ce,aP as Le,aQ as le,aR as Pe,aS as Ue,aT as Me,aU as De,aV as de,aW as he,aX as ue,aY as fe,aZ as me,a_ as Ge,a$ as ge,b0 as pe,b1 as Ye,b2 as Ve,b3 as ye,b4 as be,b5 as Be,b6 as xe,b7 as He,b8 as _e,b9 as we,ba as We,bb as ze,bc as ve,bd as Xe,be as Ke,bf as Qe,bg as $e,bh as je,bi as Je,bj as qe,bk as ke,bl as Ze,bm as Et,bn as It,bo as et,bp as tt,bq as Ct,br as st,bs as Tt,bt as Rt,bu as Ft,bv as ot,bw as it,bx as At,by as rt,bz as nt,bA as Nt,bB as Ot,bC as at,bD as St,bE as ct,bF as Lt,bG as lt,bH as Pt,bI as Ut,bJ as Mt,bK as Dt,bL as dt,bM as ht,bN as ut,bO as ft,bP as mt,bQ as Gt,bR as gt,bS as pt,bT as Yt,bU as Vt,bV as yt,bW as bt,bX as Bt,bY as xt,bZ as Ht,b_ as _t,b$ as wt,c0 as Wt,c1 as zt,c2 as vt,c3 as Xt,c4 as Kt,c5 as Qt,c6 as $t,c7 as jt,c8 as Jt,c9 as qt,ca as kt,cb as Zt,cc as EC,cd as IC,ce as eC,cf as tC,cg as CC,ch as sC,ci as TC,cj as RC,ck as FC,cl as oC,cm as iC,cn as AC,co as rC,cp as nC,cq as NC,cr as OC,cs as aC,ct as SC}from"./virtual-memory-controller-CWnYvOUm.js";import{R as cC}from"./rendered-faces-DtNZp-Dg.js";import{E as LE,G as Y}from"./index-gTtqA1ko.js";const hE={950732822:"IFCURIREFERENCE",4075327185:"IFCTIME",1209108979:"IFCTEMPERATURERATEOFCHANGEMEASURE",3457685358:"IFCSOUNDPRESSURELEVELMEASURE",4157543285:"IFCSOUNDPOWERLEVELMEASURE",2798247006:"IFCPROPERTYSETDEFINITIONSET",1790229001:"IFCPOSITIVEINTEGER",525895558:"IFCNONNEGATIVELENGTHMEASURE",1774176899:"IFCLINEINDEX",1275358634:"IFCLANGUAGEID",2541165894:"IFCDURATION",3701338814:"IFCDAYINWEEKNUMBER",2195413836:"IFCDATETIME",937566702:"IFCDATE",1683019596:"IFCCARDINALPOINTREFERENCE",2314439260:"IFCBINARY",1500781891:"IFCAREADENSITYMEASURE",3683503648:"IFCARCINDEX",4065007721:"IFCYEARNUMBER",1718600412:"IFCWARPINGMOMENTMEASURE",51269191:"IFCWARPINGCONSTANTMEASURE",2593997549:"IFCVOLUMETRICFLOWRATEMEASURE",3458127941:"IFCVOLUMEMEASURE",3345633955:"IFCVAPORPERMEABILITYMEASURE",1278329552:"IFCTORQUEMEASURE",2591213694:"IFCTIMESTAMP",2726807636:"IFCTIMEMEASURE",743184107:"IFCTHERMODYNAMICTEMPERATUREMEASURE",2016195849:"IFCTHERMALTRANSMITTANCEMEASURE",857959152:"IFCTHERMALRESISTANCEMEASURE",2281867870:"IFCTHERMALEXPANSIONCOEFFICIENTMEASURE",2645777649:"IFCTHERMALCONDUCTIVITYMEASURE",232962298:"IFCTHERMALADMITTANCEMEASURE",296282323:"IFCTEXTTRANSFORMATION",603696268:"IFCTEXTFONTNAME",3490877962:"IFCTEXTDECORATION",1460886941:"IFCTEXTALIGNMENT",2801250643:"IFCTEXT",58845555:"IFCTEMPERATUREGRADIENTMEASURE",361837227:"IFCSPECULARROUGHNESS",2757832317:"IFCSPECULAREXPONENT",3477203348:"IFCSPECIFICHEATCAPACITYMEASURE",993287707:"IFCSOUNDPRESSUREMEASURE",846465480:"IFCSOUNDPOWERMEASURE",3471399674:"IFCSOLIDANGLEMEASURE",408310005:"IFCSHEARMODULUSMEASURE",2190458107:"IFCSECTIONALAREAINTEGRALMEASURE",3467162246:"IFCSECTIONMODULUSMEASURE",2766185779:"IFCSECONDINMINUTE",3211557302:"IFCROTATIONALSTIFFNESSMEASURE",1755127002:"IFCROTATIONALMASSMEASURE",2133746277:"IFCROTATIONALFREQUENCYMEASURE",200335297:"IFCREAL",96294661:"IFCRATIOMEASURE",3972513137:"IFCRADIOACTIVITYMEASURE",3665567075:"IFCPRESSUREMEASURE",2169031380:"IFCPRESENTABLETEXT",1364037233:"IFCPOWERMEASURE",1245737093:"IFCPOSITIVERATIOMEASURE",3054510233:"IFCPOSITIVEPLANEANGLEMEASURE",2815919920:"IFCPOSITIVELENGTHMEASURE",4042175685:"IFCPLANEANGLEMEASURE",2642773653:"IFCPLANARFORCEMEASURE",2260317790:"IFCPARAMETERVALUE",929793134:"IFCPHMEASURE",2395907400:"IFCNUMERICMEASURE",2095195183:"IFCNORMALISEDRATIOMEASURE",765770214:"IFCMONTHINYEARNUMBER",2615040989:"IFCMONETARYMEASURE",3114022597:"IFCMOMENTOFINERTIAMEASURE",1648970520:"IFCMOLECULARWEIGHTMEASURE",3177669450:"IFCMOISTUREDIFFUSIVITYMEASURE",1753493141:"IFCMODULUSOFSUBGRADEREACTIONMEASURE",1052454078:"IFCMODULUSOFROTATIONALSUBGRADEREACTIONMEASURE",2173214787:"IFCMODULUSOFLINEARSUBGRADEREACTIONMEASURE",3341486342:"IFCMODULUSOFELASTICITYMEASURE",102610177:"IFCMINUTEINHOUR",3531705166:"IFCMASSPERLENGTHMEASURE",3124614049:"IFCMASSMEASURE",4017473158:"IFCMASSFLOWRATEMEASURE",1477762836:"IFCMASSDENSITYMEASURE",2486716878:"IFCMAGNETICFLUXMEASURE",286949696:"IFCMAGNETICFLUXDENSITYMEASURE",151039812:"IFCLUMINOUSINTENSITYMEASURE",2755797622:"IFCLUMINOUSINTENSITYDISTRIBUTIONMEASURE",2095003142:"IFCLUMINOUSFLUXMEASURE",503418787:"IFCLOGICAL",3086160713:"IFCLINEARVELOCITYMEASURE",1307019551:"IFCLINEARSTIFFNESSMEASURE",2128979029:"IFCLINEARMOMENTMEASURE",191860431:"IFCLINEARFORCEMEASURE",1243674935:"IFCLENGTHMEASURE",3258342251:"IFCLABEL",2054016361:"IFCKINEMATICVISCOSITYMEASURE",3192672207:"IFCISOTHERMALMOISTURECAPACITYMEASURE",3686016028:"IFCIONCONCENTRATIONMEASURE",3809634241:"IFCINTEGERCOUNTRATEMEASURE",1939436016:"IFCINTEGER",2679005408:"IFCINDUCTANCEMEASURE",3358199106:"IFCILLUMINANCEMEASURE",983778844:"IFCIDENTIFIER",2589826445:"IFCHOURINDAY",1158859006:"IFCHEATINGVALUEMEASURE",3113092358:"IFCHEATFLUXDENSITYMEASURE",3064340077:"IFCGLOBALLYUNIQUEID",3044325142:"IFCFREQUENCYMEASURE",1361398929:"IFCFORCEMEASURE",2590844177:"IFCFONTWEIGHT",2715512545:"IFCFONTVARIANT",1102727119:"IFCFONTSTYLE",2078135608:"IFCENERGYMEASURE",2506197118:"IFCELECTRICVOLTAGEMEASURE",2951915441:"IFCELECTRICRESISTANCEMEASURE",3790457270:"IFCELECTRICCURRENTMEASURE",2093906313:"IFCELECTRICCONDUCTANCEMEASURE",3818826038:"IFCELECTRICCHARGEMEASURE",1827137117:"IFCELECTRICCAPACITANCEMEASURE",69416015:"IFCDYNAMICVISCOSITYMEASURE",524656162:"IFCDOSEEQUIVALENTMEASURE",4134073009:"IFCDIMENSIONCOUNT",1514641115:"IFCDESCRIPTIVEMEASURE",300323983:"IFCDAYLIGHTSAVINGHOUR",86635668:"IFCDAYINMONTHNUMBER",94842927:"IFCCURVATUREMEASURE",1778710042:"IFCCOUNTMEASURE",3238673880:"IFCCONTEXTDEPENDENTMEASURE",3812528620:"IFCCOMPOUNDPLANEANGLEMEASURE",2991860651:"IFCCOMPLEXNUMBER",1867003952:"IFCBOXALIGNMENT",2735952531:"IFCBOOLEAN",2650437152:"IFCAREAMEASURE",632304761:"IFCANGULARVELOCITYMEASURE",360377573:"IFCAMOUNTOFSUBSTANCEMEASURE",4182062534:"IFCACCELERATIONMEASURE",3699917729:"IFCABSORBEDDOSEMEASURE",1971632696:"IFCGEOSLICE",2680139844:"IFCGEOMODEL",24726584:"IFCELECTRICFLOWTREATMENTDEVICE",3693000487:"IFCDISTRIBUTIONBOARD",3460952963:"IFCCONVEYORSEGMENT",3999819293:"IFCCAISSONFOUNDATION",3314249567:"IFCBOREHOLE",4196446775:"IFCBEARING",325726236:"IFCALIGNMENT",3425753595:"IFCTRACKELEMENT",991950508:"IFCSIGNAL",3798194928:"IFCREINFORCEDSOIL",3290496277:"IFCRAIL",1383356374:"IFCPAVEMENT",2182337498:"IFCNAVIGATIONELEMENT",234836483:"IFCMOORINGDEVICE",2078563270:"IFCMOBILETELECOMMUNICATIONSAPPLIANCE",1638804497:"IFCLIQUIDTERMINAL",1154579445:"IFCLINEARPOSITIONINGELEMENT",2696325953:"IFCKERB",2713699986:"IFCGEOTECHNICALASSEMBLY",2142170206:"IFCELECTRICFLOWTREATMENTDEVICETYPE",3376911765:"IFCEARTHWORKSFILL",1077100507:"IFCEARTHWORKSELEMENT",3071239417:"IFCEARTHWORKSCUT",479945903:"IFCDISTRIBUTIONBOARDTYPE",3426335179:"IFCDEEPFOUNDATION",1502416096:"IFCCOURSE",2940368186:"IFCCONVEYORSEGMENTTYPE",3203706013:"IFCCAISSONFOUNDATIONTYPE",3862327254:"IFCBUILTSYSTEM",1876633798:"IFCBUILTELEMENT",963979645:"IFCBRIDGEPART",644574406:"IFCBRIDGE",3649138523:"IFCBEARINGTYPE",1662888072:"IFCALIGNMENTVERTICAL",317615605:"IFCALIGNMENTSEGMENT",1545765605:"IFCALIGNMENTHORIZONTAL",4266260250:"IFCALIGNMENTCANT",3956297820:"IFCVIBRATIONDAMPERTYPE",1530820697:"IFCVIBRATIONDAMPER",840318589:"IFCVEHICLE",1953115116:"IFCTRANSPORTATIONDEVICE",618700268:"IFCTRACKELEMENTTYPE",2281632017:"IFCTENDONCONDUITTYPE",3663046924:"IFCTENDONCONDUIT",42703149:"IFCSINESPIRAL",1894708472:"IFCSIGNALTYPE",3599934289:"IFCSIGNTYPE",33720170:"IFCSIGN",1027922057:"IFCSEVENTHORDERPOLYNOMIALSPIRAL",544395925:"IFCSEGMENTEDREFERENCECURVE",3649235739:"IFCSECONDORDERPOLYNOMIALSPIRAL",550521510:"IFCROADPART",146592293:"IFCROAD",3818125796:"IFCRELADHERESTOELEMENT",4021432810:"IFCREFERENT",1891881377:"IFCRAILWAYPART",3992365140:"IFCRAILWAY",1763565496:"IFCRAILTYPE",1946335990:"IFCPOSITIONINGELEMENT",514975943:"IFCPAVEMENTTYPE",506776471:"IFCNAVIGATIONELEMENTTYPE",710110818:"IFCMOORINGDEVICETYPE",1950438474:"IFCMOBILETELECOMMUNICATIONSAPPLIANCETYPE",976884017:"IFCMARINEPART",525669439:"IFCMARINEFACILITY",1770583370:"IFCLIQUIDTERMINALTYPE",2176059722:"IFCLINEARELEMENT",679976338:"IFCKERBTYPE",3948183225:"IFCIMPACTPROTECTIONDEVICETYPE",2568555532:"IFCIMPACTPROTECTIONDEVICE",2898700619:"IFCGRADIENTCURVE",1594536857:"IFCGEOTECHNICALSTRATUM",4230923436:"IFCGEOTECHNICALELEMENT",4228831410:"IFCFACILITYPARTCOMMON",1310830890:"IFCFACILITYPART",24185140:"IFCFACILITY",4234616927:"IFCDIRECTRIXDERIVEDREFERENCESWEPTAREASOLID",1306400036:"IFCDEEPFOUNDATIONTYPE",4189326743:"IFCCOURSETYPE",2000195564:"IFCCOSINESPIRAL",3497074424:"IFCCLOTHOID",1626504194:"IFCBUILTELEMENTTYPE",3651464721:"IFCVEHICLETYPE",1229763772:"IFCTRIANGULATEDIRREGULARNETWORK",3665877780:"IFCTRANSPORTATIONDEVICETYPE",782932809:"IFCTHIRDORDERPOLYNOMIALSPIRAL",2735484536:"IFCSPIRAL",1356537516:"IFCSECTIONEDSURFACE",1290935644:"IFCSECTIONEDSOLIDHORIZONTAL",1862484736:"IFCSECTIONEDSOLID",1441486842:"IFCRELPOSITIONS",1033248425:"IFCRELASSOCIATESPROFILEDEF",3381221214:"IFCPOLYNOMIALCURVE",2485787929:"IFCOFFSETCURVEBYDISTANCES",590820931:"IFCOFFSETCURVE",3465909080:"IFCINDEXEDPOLYGONALTEXTUREMAP",593015953:"IFCDIRECTRIXCURVESWEPTAREASOLID",4212018352:"IFCCURVESEGMENT",3425423356:"IFCAXIS2PLACEMENTLINEAR",823603102:"IFCSEGMENT",2165702409:"IFCPOINTBYDISTANCEEXPRESSION",182550632:"IFCOPENCROSSPROFILEDEF",388784114:"IFCLINEARPLACEMENT",536804194:"IFCALIGNMENTHORIZONTALSEGMENT",3752311538:"IFCALIGNMENTCANTSEGMENT",1010789467:"IFCTEXTURECOORDINATEINDICESWITHVOIDS",222769930:"IFCTEXTURECOORDINATEINDICES",2691318326:"IFCQUANTITYNUMBER",3633395639:"IFCALIGNMENTVERTICALSEGMENT",2879124712:"IFCALIGNMENTPARAMETERSEGMENT",25142252:"IFCCONTROLLER",3087945054:"IFCALARM",4288193352:"IFCACTUATOR",630975310:"IFCUNITARYCONTROLELEMENT",4086658281:"IFCSENSOR",2295281155:"IFCPROTECTIVEDEVICETRIPPINGUNIT",182646315:"IFCFLOWINSTRUMENT",1426591983:"IFCFIRESUPPRESSIONTERMINAL",819412036:"IFCFILTER",3415622556:"IFCFAN",1003880860:"IFCELECTRICTIMECONTROL",402227799:"IFCELECTRICMOTOR",264262732:"IFCELECTRICGENERATOR",3310460725:"IFCELECTRICFLOWSTORAGEDEVICE",862014818:"IFCELECTRICDISTRIBUTIONBOARD",1904799276:"IFCELECTRICAPPLIANCE",1360408905:"IFCDUCTSILENCER",3518393246:"IFCDUCTSEGMENT",342316401:"IFCDUCTFITTING",562808652:"IFCDISTRIBUTIONCIRCUIT",4074379575:"IFCDAMPER",3640358203:"IFCCOOLINGTOWER",4136498852:"IFCCOOLEDBEAM",2272882330:"IFCCONDENSER",3571504051:"IFCCOMPRESSOR",3221913625:"IFCCOMMUNICATIONSAPPLIANCE",639361253:"IFCCOIL",3902619387:"IFCCHILLER",4217484030:"IFCCABLESEGMENT",1051757585:"IFCCABLEFITTING",3758799889:"IFCCABLECARRIERSEGMENT",635142910:"IFCCABLECARRIERFITTING",2938176219:"IFCBURNER",32344328:"IFCBOILER",2906023776:"IFCBEAMSTANDARDCASE",277319702:"IFCAUDIOVISUALAPPLIANCE",2056796094:"IFCAIRTOAIRHEATRECOVERY",177149247:"IFCAIRTERMINALBOX",1634111441:"IFCAIRTERMINAL",486154966:"IFCWINDOWSTANDARDCASE",4237592921:"IFCWASTETERMINAL",4156078855:"IFCWALLELEMENTEDCASE",4207607924:"IFCVALVE",4292641817:"IFCUNITARYEQUIPMENT",3179687236:"IFCUNITARYCONTROLELEMENTTYPE",3026737570:"IFCTUBEBUNDLE",3825984169:"IFCTRANSFORMER",812556717:"IFCTANK",1162798199:"IFCSWITCHINGDEVICE",385403989:"IFCSTRUCTURALLOADCASE",1404847402:"IFCSTACKTERMINAL",1999602285:"IFCSPACEHEATER",3420628829:"IFCSOLARDEVICE",3027962421:"IFCSLABSTANDARDCASE",3127900445:"IFCSLABELEMENTEDCASE",1329646415:"IFCSHADINGDEVICE",3053780830:"IFCSANITARYTERMINAL",2572171363:"IFCREINFORCINGBARTYPE",1232101972:"IFCRATIONALBSPLINECURVEWITHKNOTS",90941305:"IFCPUMP",655969474:"IFCPROTECTIVEDEVICETRIPPINGUNITTYPE",738039164:"IFCPROTECTIVEDEVICE",1156407060:"IFCPLATESTANDARDCASE",3612865200:"IFCPIPESEGMENT",310824031:"IFCPIPEFITTING",3694346114:"IFCOUTLET",144952367:"IFCOUTERBOUNDARYCURVE",2474470126:"IFCMOTORCONNECTION",1911478936:"IFCMEMBERSTANDARDCASE",1437502449:"IFCMEDICALDEVICE",629592764:"IFCLIGHTFIXTURE",76236018:"IFCLAMP",2176052936:"IFCJUNCTIONBOX",4175244083:"IFCINTERCEPTOR",2068733104:"IFCHUMIDIFIER",3319311131:"IFCHEATEXCHANGER",2188021234:"IFCFLOWMETER",1209101575:"IFCEXTERNALSPATIALELEMENT",484807127:"IFCEVAPORATOR",3747195512:"IFCEVAPORATIVECOOLER",2814081492:"IFCENGINE",2417008758:"IFCELECTRICDISTRIBUTIONBOARDTYPE",3242481149:"IFCDOORSTANDARDCASE",3205830791:"IFCDISTRIBUTIONSYSTEM",400855858:"IFCCOMMUNICATIONSAPPLIANCETYPE",905975707:"IFCCOLUMNSTANDARDCASE",1677625105:"IFCCIVILELEMENT",3296154744:"IFCCHIMNEY",2674252688:"IFCCABLEFITTINGTYPE",2188180465:"IFCBURNERTYPE",1177604601:"IFCBUILDINGSYSTEM",39481116:"IFCBUILDINGELEMENTPARTTYPE",1136057603:"IFCBOUNDARYCURVE",2461110595:"IFCBSPLINECURVEWITHKNOTS",1532957894:"IFCAUDIOVISUALAPPLIANCETYPE",4088093105:"IFCWORKCALENDAR",4009809668:"IFCWINDOWTYPE",926996030:"IFCVOIDINGFEATURE",2391383451:"IFCVIBRATIONISOLATOR",2415094496:"IFCTENDONTYPE",3081323446:"IFCTENDONANCHORTYPE",413509423:"IFCSYSTEMFURNITUREELEMENT",3101698114:"IFCSURFACEFEATURE",3657597509:"IFCSTRUCTURALSURFACEACTION",2757150158:"IFCSTRUCTURALCURVEREACTION",1004757350:"IFCSTRUCTURALCURVEACTION",338393293:"IFCSTAIRTYPE",1072016465:"IFCSOLARDEVICETYPE",4074543187:"IFCSHADINGDEVICETYPE",2157484638:"IFCSEAMCURVE",2781568857:"IFCROOFTYPE",2310774935:"IFCREINFORCINGMESHTYPE",964333572:"IFCREINFORCINGELEMENTTYPE",683857671:"IFCRATIONALBSPLINESURFACEWITHKNOTS",1469900589:"IFCRAMPTYPE",2839578677:"IFCPOLYGONALFACESET",1158309216:"IFCPILETYPE",3079942009:"IFCOPENINGSTANDARDCASE",1114901282:"IFCMEDICALDEVICETYPE",3113134337:"IFCINTERSECTIONCURVE",3946677679:"IFCINTERCEPTORTYPE",2571569899:"IFCINDEXEDPOLYCURVE",3493046030:"IFCGEOGRAPHICELEMENT",1509553395:"IFCFURNITURE",1893162501:"IFCFOOTINGTYPE",2853485674:"IFCEXTERNALSPATIALSTRUCTUREELEMENT",4148101412:"IFCEVENT",132023988:"IFCENGINETYPE",2397081782:"IFCELEMENTASSEMBLYTYPE",2323601079:"IFCDOORTYPE",1213902940:"IFCCYLINDRICALSURFACE",1525564444:"IFCCONSTRUCTIONPRODUCTRESOURCETYPE",4105962743:"IFCCONSTRUCTIONMATERIALRESOURCETYPE",2185764099:"IFCCONSTRUCTIONEQUIPMENTRESOURCETYPE",15328376:"IFCCOMPOSITECURVEONSURFACE",3875453745:"IFCCOMPLEXPROPERTYTEMPLATE",3893394355:"IFCCIVILELEMENTTYPE",2197970202:"IFCCHIMNEYTYPE",167062518:"IFCBSPLINESURFACEWITHKNOTS",2887950389:"IFCBSPLINESURFACE",2603310189:"IFCADVANCEDBREPWITHVOIDS",1635779807:"IFCADVANCEDBREP",2916149573:"IFCTRIANGULATEDFACESET",1935646853:"IFCTOROIDALSURFACE",2387106220:"IFCTESSELLATEDFACESET",3206491090:"IFCTASKTYPE",699246055:"IFCSURFACECURVE",4095615324:"IFCSUBCONTRACTRESOURCETYPE",603775116:"IFCSTRUCTURALSURFACEREACTION",4015995234:"IFCSPHERICALSURFACE",2481509218:"IFCSPATIALZONETYPE",463610769:"IFCSPATIALZONE",710998568:"IFCSPATIALELEMENTTYPE",1412071761:"IFCSPATIALELEMENT",3663146110:"IFCSIMPLEPROPERTYTEMPLATE",3243963512:"IFCREVOLVEDAREASOLIDTAPERED",816062949:"IFCREPARAMETRISEDCOMPOSITECURVESEGMENT",1521410863:"IFCRELSPACEBOUNDARY2NDLEVEL",3523091289:"IFCRELSPACEBOUNDARY1STLEVEL",427948657:"IFCRELINTERFERESELEMENTS",307848117:"IFCRELDEFINESBYTEMPLATE",1462361463:"IFCRELDEFINESBYOBJECT",2565941209:"IFCRELDECLARES",1027710054:"IFCRELASSIGNSTOGROUPBYFACTOR",3521284610:"IFCPROPERTYTEMPLATE",492091185:"IFCPROPERTYSETTEMPLATE",653396225:"IFCPROJECTLIBRARY",569719735:"IFCPROCEDURETYPE",3967405729:"IFCPREDEFINEDPROPERTYSET",1682466193:"IFCPCURVE",428585644:"IFCLABORRESOURCETYPE",2294589976:"IFCINDEXEDPOLYGONALFACEWITHVOIDS",178912537:"IFCINDEXEDPOLYGONALFACE",4095422895:"IFCGEOGRAPHICELEMENTTYPE",2652556860:"IFCFIXEDREFERENCESWEPTAREASOLID",2804161546:"IFCEXTRUDEDAREASOLIDTAPERED",4024345920:"IFCEVENTTYPE",2629017746:"IFCCURVEBOUNDEDSURFACE",1815067380:"IFCCREWRESOURCETYPE",3419103109:"IFCCONTEXT",2574617495:"IFCCONSTRUCTIONRESOURCETYPE",2059837836:"IFCCARTESIANPOINTLIST3D",1675464909:"IFCCARTESIANPOINTLIST2D",574549367:"IFCCARTESIANPOINTLIST",3406155212:"IFCADVANCEDFACE",3698973494:"IFCTYPERESOURCE",3736923433:"IFCTYPEPROCESS",901063453:"IFCTESSELLATEDITEM",1096409881:"IFCSWEPTDISKSOLIDPOLYGONAL",1042787934:"IFCRESOURCETIME",1608871552:"IFCRESOURCECONSTRAINTRELATIONSHIP",2943643501:"IFCRESOURCEAPPROVALRELATIONSHIP",2090586900:"IFCQUANTITYSET",1482703590:"IFCPROPERTYTEMPLATEDEFINITION",3778827333:"IFCPREDEFINEDPROPERTIES",2998442950:"IFCMIRROREDPROFILEDEF",853536259:"IFCMATERIALRELATIONSHIP",3404854881:"IFCMATERIALPROFILESETUSAGETAPERING",3079605661:"IFCMATERIALPROFILESETUSAGE",2852063980:"IFCMATERIALCONSTITUENTSET",3708119e3:"IFCMATERIALCONSTITUENT",1585845231:"IFCLAGTIME",2133299955:"IFCINDEXEDTRIANGLETEXTUREMAP",1437953363:"IFCINDEXEDTEXTUREMAP",3570813810:"IFCINDEXEDCOLOURMAP",1437805879:"IFCEXTERNALREFERENCERELATIONSHIP",297599258:"IFCEXTENDEDPROPERTIES",211053100:"IFCEVENTTIME",2713554722:"IFCCONVERSIONBASEDUNITWITHOFFSET",3285139300:"IFCCOLOURRGBLIST",1236880293:"IFCWORKTIME",1199560280:"IFCTIMEPERIOD",3611470254:"IFCTEXTUREVERTEXLIST",2771591690:"IFCTASKTIMERECURRING",1549132990:"IFCTASKTIME",2043862942:"IFCTABLECOLUMN",2934153892:"IFCSURFACEREINFORCEMENTAREA",609421318:"IFCSTRUCTURALLOADORRESULT",3478079324:"IFCSTRUCTURALLOADCONFIGURATION",1054537805:"IFCSCHEDULINGTIME",2439245199:"IFCRESOURCELEVELRELATIONSHIP",2433181523:"IFCREFERENCE",3915482550:"IFCRECURRENCEPATTERN",986844984:"IFCPROPERTYABSTRACTION",3843373140:"IFCPROJECTEDCRS",677532197:"IFCPRESENTATIONITEM",1507914824:"IFCMATERIALUSAGEDEFINITION",552965576:"IFCMATERIALPROFILEWITHOFFSETS",164193824:"IFCMATERIALPROFILESET",2235152071:"IFCMATERIALPROFILE",1847252529:"IFCMATERIALLAYERWITHOFFSETS",760658860:"IFCMATERIALDEFINITION",3057273783:"IFCMAPCONVERSION",4294318154:"IFCEXTERNALINFORMATION",1466758467:"IFCCOORDINATEREFERENCESYSTEM",1785450214:"IFCCOORDINATEOPERATION",775493141:"IFCCONNECTIONVOLUMEGEOMETRY",979691226:"IFCREINFORCINGBAR",3700593921:"IFCELECTRICDISTRIBUTIONPOINT",1062813311:"IFCDISTRIBUTIONCONTROLELEMENT",1052013943:"IFCDISTRIBUTIONCHAMBERELEMENT",578613899:"IFCCONTROLLERTYPE",2454782716:"IFCCHAMFEREDGEFEATURE",753842376:"IFCBEAM",3001207471:"IFCALARMTYPE",2874132201:"IFCACTUATORTYPE",3304561284:"IFCWINDOW",3512223829:"IFCWALLSTANDARDCASE",2391406946:"IFCWALL",3313531582:"IFCVIBRATIONISOLATORTYPE",2347447852:"IFCTENDONANCHOR",3824725483:"IFCTENDON",2515109513:"IFCSTRUCTURALANALYSISMODEL",4252922144:"IFCSTAIRFLIGHT",331165859:"IFCSTAIR",1529196076:"IFCSLAB",1783015770:"IFCSENSORTYPE",1376911519:"IFCROUNDEDEDGEFEATURE",2016517767:"IFCROOF",2320036040:"IFCREINFORCINGMESH",3027567501:"IFCREINFORCINGELEMENT",3055160366:"IFCRATIONALBEZIERCURVE",3283111854:"IFCRAMPFLIGHT",3024970846:"IFCRAMP",2262370178:"IFCRAILING",3171933400:"IFCPLATE",1687234759:"IFCPILE",1073191201:"IFCMEMBER",900683007:"IFCFOOTING",3508470533:"IFCFLOWTREATMENTDEVICE",2223149337:"IFCFLOWTERMINAL",707683696:"IFCFLOWSTORAGEDEVICE",987401354:"IFCFLOWSEGMENT",3132237377:"IFCFLOWMOVINGDEVICE",4037862832:"IFCFLOWINSTRUMENTTYPE",4278956645:"IFCFLOWFITTING",2058353004:"IFCFLOWCONTROLLER",4222183408:"IFCFIRESUPPRESSIONTERMINALTYPE",1810631287:"IFCFILTERTYPE",346874300:"IFCFANTYPE",1658829314:"IFCENERGYCONVERSIONDEVICE",857184966:"IFCELECTRICALELEMENT",1634875225:"IFCELECTRICALCIRCUIT",712377611:"IFCELECTRICTIMECONTROLTYPE",1217240411:"IFCELECTRICMOTORTYPE",1365060375:"IFCELECTRICHEATERTYPE",1534661035:"IFCELECTRICGENERATORTYPE",3277789161:"IFCELECTRICFLOWSTORAGEDEVICETYPE",663422040:"IFCELECTRICAPPLIANCETYPE",855621170:"IFCEDGEFEATURE",2030761528:"IFCDUCTSILENCERTYPE",3760055223:"IFCDUCTSEGMENTTYPE",869906466:"IFCDUCTFITTINGTYPE",395920057:"IFCDOOR",3041715199:"IFCDISTRIBUTIONPORT",3040386961:"IFCDISTRIBUTIONFLOWELEMENT",1945004755:"IFCDISTRIBUTIONELEMENT",2063403501:"IFCDISTRIBUTIONCONTROLELEMENTTYPE",1599208980:"IFCDISTRIBUTIONCHAMBERELEMENTTYPE",2635815018:"IFCDISCRETEACCESSORYTYPE",1335981549:"IFCDISCRETEACCESSORY",4147604152:"IFCDIAMETERDIMENSION",3961806047:"IFCDAMPERTYPE",3495092785:"IFCCURTAINWALL",1973544240:"IFCCOVERING",2954562838:"IFCCOOLINGTOWERTYPE",335055490:"IFCCOOLEDBEAMTYPE",488727124:"IFCCONSTRUCTIONPRODUCTRESOURCE",1060000209:"IFCCONSTRUCTIONMATERIALRESOURCE",3898045240:"IFCCONSTRUCTIONEQUIPMENTRESOURCE",1163958913:"IFCCONDITIONCRITERION",2188551683:"IFCCONDITION",2816379211:"IFCCONDENSERTYPE",3850581409:"IFCCOMPRESSORTYPE",843113511:"IFCCOLUMN",2301859152:"IFCCOILTYPE",2611217952:"IFCCIRCLE",2951183804:"IFCCHILLERTYPE",1285652485:"IFCCABLESEGMENTTYPE",3293546465:"IFCCABLECARRIERSEGMENTTYPE",395041908:"IFCCABLECARRIERFITTINGTYPE",1909888760:"IFCBUILDINGELEMENTPROXYTYPE",1095909175:"IFCBUILDINGELEMENTPROXY",2979338954:"IFCBUILDINGELEMENTPART",52481810:"IFCBUILDINGELEMENTCOMPONENT",3299480353:"IFCBUILDINGELEMENT",231477066:"IFCBOILERTYPE",1916977116:"IFCBEZIERCURVE",819618141:"IFCBEAMTYPE",1967976161:"IFCBSPLINECURVE",3460190687:"IFCASSET",2470393545:"IFCANGULARDIMENSION",1871374353:"IFCAIRTOAIRHEATRECOVERYTYPE",3352864051:"IFCAIRTERMINALTYPE",1411407467:"IFCAIRTERMINALBOXTYPE",3821786052:"IFCACTIONREQUEST",1213861670:"IFC2DCOMPOSITECURVE",1033361043:"IFCZONE",3342526732:"IFCWORKSCHEDULE",4218914973:"IFCWORKPLAN",1028945134:"IFCWORKCONTROL",1133259667:"IFCWASTETERMINALTYPE",1898987631:"IFCWALLTYPE",2769231204:"IFCVIRTUALELEMENT",728799441:"IFCVALVETYPE",1911125066:"IFCUNITARYEQUIPMENTTYPE",1600972822:"IFCTUBEBUNDLETYPE",3593883385:"IFCTRIMMEDCURVE",1620046519:"IFCTRANSPORTELEMENT",1692211062:"IFCTRANSFORMERTYPE",1637806684:"IFCTIMESERIESSCHEDULE",5716631:"IFCTANKTYPE",2254336722:"IFCSYSTEM",2315554128:"IFCSWITCHINGDEVICETYPE",148013059:"IFCSUBCONTRACTRESOURCE",1975003073:"IFCSTRUCTURALSURFACECONNECTION",2986769608:"IFCSTRUCTURALRESULTGROUP",1235345126:"IFCSTRUCTURALPOINTREACTION",734778138:"IFCSTRUCTURALPOINTCONNECTION",2082059205:"IFCSTRUCTURALPOINTACTION",3987759626:"IFCSTRUCTURALPLANARACTIONVARYING",1621171031:"IFCSTRUCTURALPLANARACTION",1252848954:"IFCSTRUCTURALLOADGROUP",1721250024:"IFCSTRUCTURALLINEARACTIONVARYING",1807405624:"IFCSTRUCTURALLINEARACTION",2445595289:"IFCSTRUCTURALCURVEMEMBERVARYING",214636428:"IFCSTRUCTURALCURVEMEMBER",4243806635:"IFCSTRUCTURALCURVECONNECTION",1179482911:"IFCSTRUCTURALCONNECTION",682877961:"IFCSTRUCTURALACTION",1039846685:"IFCSTAIRFLIGHTTYPE",3112655638:"IFCSTACKTERMINALTYPE",3812236995:"IFCSPACETYPE",652456506:"IFCSPACEPROGRAM",1305183839:"IFCSPACEHEATERTYPE",3856911033:"IFCSPACE",2533589738:"IFCSLABTYPE",4097777520:"IFCSITE",4105383287:"IFCSERVICELIFE",3517283431:"IFCSCHEDULETIMECONTROL",1768891740:"IFCSANITARYTERMINALTYPE",2863920197:"IFCRELASSIGNSTASKS",160246688:"IFCRELAGGREGATES",2324767716:"IFCRAMPFLIGHTTYPE",2893384427:"IFCRAILINGTYPE",3248260540:"IFCRADIUSDIMENSION",2250791053:"IFCPUMPTYPE",1842657554:"IFCPROTECTIVEDEVICETYPE",3651124850:"IFCPROJECTIONELEMENT",3642467123:"IFCPROJECTORDERRECORD",2904328755:"IFCPROJECTORDER",2744685151:"IFCPROCEDURE",3740093272:"IFCPORT",3724593414:"IFCPOLYLINE",4017108033:"IFCPLATETYPE",4231323485:"IFCPIPESEGMENTTYPE",804291784:"IFCPIPEFITTINGTYPE",3327091369:"IFCPERMIT",2382730787:"IFCPERFORMANCEHISTORY",2837617999:"IFCOUTLETTYPE",3425660407:"IFCORDERACTION",3588315303:"IFCOPENINGELEMENT",4143007308:"IFCOCCUPANT",1916936684:"IFCMOVE",977012517:"IFCMOTORCONNECTIONTYPE",3181161470:"IFCMEMBERTYPE",2108223431:"IFCMECHANICALFASTENERTYPE",377706215:"IFCMECHANICALFASTENER",2506943328:"IFCLINEARDIMENSION",1161773419:"IFCLIGHTFIXTURETYPE",1051575348:"IFCLAMPTYPE",3827777499:"IFCLABORRESOURCE",4288270099:"IFCJUNCTIONBOXTYPE",2391368822:"IFCINVENTORY",1806887404:"IFCHUMIDIFIERTYPE",1251058090:"IFCHEATEXCHANGERTYPE",2706460486:"IFCGROUP",3009204131:"IFCGRID",200128114:"IFCGASTERMINALTYPE",814719939:"IFCFURNITURESTANDARD",263784265:"IFCFURNISHINGELEMENT",3009222698:"IFCFLOWTREATMENTDEVICETYPE",2297155007:"IFCFLOWTERMINALTYPE",1339347760:"IFCFLOWSTORAGEDEVICETYPE",1834744321:"IFCFLOWSEGMENTTYPE",1482959167:"IFCFLOWMOVINGDEVICETYPE",3815607619:"IFCFLOWMETERTYPE",3198132628:"IFCFLOWFITTINGTYPE",3907093117:"IFCFLOWCONTROLLERTYPE",1287392070:"IFCFEATUREELEMENTSUBTRACTION",2143335405:"IFCFEATUREELEMENTADDITION",2827207264:"IFCFEATUREELEMENT",2489546625:"IFCFASTENERTYPE",647756555:"IFCFASTENER",3737207727:"IFCFACETEDBREPWITHVOIDS",807026263:"IFCFACETEDBREP",3390157468:"IFCEVAPORATORTYPE",3174744832:"IFCEVAPORATIVECOOLERTYPE",3272907226:"IFCEQUIPMENTSTANDARD",1962604670:"IFCEQUIPMENTELEMENT",2107101300:"IFCENERGYCONVERSIONDEVICETYPE",1704287377:"IFCELLIPSE",2590856083:"IFCELEMENTCOMPONENTTYPE",1623761950:"IFCELEMENTCOMPONENT",4123344466:"IFCELEMENTASSEMBLY",1758889154:"IFCELEMENT",360485395:"IFCELECTRICALBASEPROPERTIES",3849074793:"IFCDISTRIBUTIONFLOWELEMENTTYPE",3256556792:"IFCDISTRIBUTIONELEMENTTYPE",681481545:"IFCDIMENSIONCURVEDIRECTEDCALLOUT",1457835157:"IFCCURTAINWALLTYPE",3295246426:"IFCCREWRESOURCE",1916426348:"IFCCOVERINGTYPE",1419761937:"IFCCOSTSCHEDULE",3895139033:"IFCCOSTITEM",3293443760:"IFCCONTROL",2559216714:"IFCCONSTRUCTIONRESOURCE",2510884976:"IFCCONIC",3732776249:"IFCCOMPOSITECURVE",300633059:"IFCCOLUMNTYPE",2937912522:"IFCCIRCLEHOLLOWPROFILEDEF",3124254112:"IFCBUILDINGSTOREY",1950629157:"IFCBUILDINGELEMENTTYPE",4031249490:"IFCBUILDING",1260505505:"IFCBOUNDEDCURVE",3649129432:"IFCBOOLEANCLIPPINGRESULT",1334484129:"IFCBLOCK",3207858831:"IFCASYMMETRICISHAPEPROFILEDEF",1674181508:"IFCANNOTATION",2296667514:"IFCACTOR",2097647324:"IFCTRANSPORTELEMENTTYPE",3473067441:"IFCTASK",1580310250:"IFCSYSTEMFURNITUREELEMENTTYPE",4124788165:"IFCSURFACEOFREVOLUTION",2809605785:"IFCSURFACEOFLINEAREXTRUSION",2028607225:"IFCSURFACECURVESWEPTAREASOLID",4070609034:"IFCSTRUCTUREDDIMENSIONCALLOUT",2218152070:"IFCSTRUCTURALSURFACEMEMBERVARYING",3979015343:"IFCSTRUCTURALSURFACEMEMBER",3689010777:"IFCSTRUCTURALREACTION",530289379:"IFCSTRUCTURALMEMBER",3136571912:"IFCSTRUCTURALITEM",3544373492:"IFCSTRUCTURALACTIVITY",451544542:"IFCSPHERE",3893378262:"IFCSPATIALSTRUCTUREELEMENTTYPE",2706606064:"IFCSPATIALSTRUCTUREELEMENT",3626867408:"IFCRIGHTCIRCULARCYLINDER",4158566097:"IFCRIGHTCIRCULARCONE",1856042241:"IFCREVOLVEDAREASOLID",2914609552:"IFCRESOURCE",1401173127:"IFCRELVOIDSELEMENT",3451746338:"IFCRELSPACEBOUNDARY",366585022:"IFCRELSERVICESBUILDINGS",4122056220:"IFCRELSEQUENCE",1058617721:"IFCRELSCHEDULESCOSTITEMS",1245217292:"IFCRELREFERENCEDINSPATIALSTRUCTURE",750771296:"IFCRELPROJECTSELEMENT",202636808:"IFCRELOVERRIDESPROPERTIES",2051452291:"IFCRELOCCUPIESSPACES",3268803585:"IFCRELNESTS",4189434867:"IFCRELINTERACTIONREQUIREMENTS",279856033:"IFCRELFLOWCONTROLELEMENTS",3940055652:"IFCRELFILLSELEMENT",781010003:"IFCRELDEFINESBYTYPE",4186316022:"IFCRELDEFINESBYPROPERTIES",693640335:"IFCRELDEFINES",2551354335:"IFCRELDECOMPOSES",2802773753:"IFCRELCOVERSSPACES",886880790:"IFCRELCOVERSBLDGELEMENTS",3242617779:"IFCRELCONTAINEDINSPATIALSTRUCTURE",3678494232:"IFCRELCONNECTSWITHREALIZINGELEMENTS",504942748:"IFCRELCONNECTSWITHECCENTRICITY",1638771189:"IFCRELCONNECTSSTRUCTURALMEMBER",3912681535:"IFCRELCONNECTSSTRUCTURALELEMENT",2127690289:"IFCRELCONNECTSSTRUCTURALACTIVITY",3190031847:"IFCRELCONNECTSPORTS",4201705270:"IFCRELCONNECTSPORTTOELEMENT",3945020480:"IFCRELCONNECTSPATHELEMENTS",1204542856:"IFCRELCONNECTSELEMENTS",826625072:"IFCRELCONNECTS",2851387026:"IFCRELASSOCIATESPROFILEPROPERTIES",2655215786:"IFCRELASSOCIATESMATERIAL",3840914261:"IFCRELASSOCIATESLIBRARY",982818633:"IFCRELASSOCIATESDOCUMENT",2728634034:"IFCRELASSOCIATESCONSTRAINT",919958153:"IFCRELASSOCIATESCLASSIFICATION",4095574036:"IFCRELASSOCIATESAPPROVAL",1327628568:"IFCRELASSOCIATESAPPLIEDVALUE",1865459582:"IFCRELASSOCIATES",205026976:"IFCRELASSIGNSTORESOURCE",3372526763:"IFCRELASSIGNSTOPROJECTORDER",2857406711:"IFCRELASSIGNSTOPRODUCT",4278684876:"IFCRELASSIGNSTOPROCESS",1307041759:"IFCRELASSIGNSTOGROUP",2495723537:"IFCRELASSIGNSTOCONTROL",1683148259:"IFCRELASSIGNSTOACTOR",3939117080:"IFCRELASSIGNS",3454111270:"IFCRECTANGULARTRIMMEDSURFACE",2798486643:"IFCRECTANGULARPYRAMID",2770003689:"IFCRECTANGLEHOLLOWPROFILEDEF",3219374653:"IFCPROXY",1451395588:"IFCPROPERTYSET",4194566429:"IFCPROJECTIONCURVE",103090709:"IFCPROJECT",4208778838:"IFCPRODUCT",2945172077:"IFCPROCESS",220341763:"IFCPLANE",603570806:"IFCPLANARBOX",3566463478:"IFCPERMEABLECOVERINGPROPERTIES",3505215534:"IFCOFFSETCURVE3D",3388369263:"IFCOFFSETCURVE2D",3888040117:"IFCOBJECT",1425443689:"IFCMANIFOLDSOLIDBREP",1281925730:"IFCLINE",572779678:"IFCLSHAPEPROFILEDEF",1484403080:"IFCISHAPEPROFILEDEF",987898635:"IFCGEOMETRICCURVESET",1268542332:"IFCFURNITURETYPE",4238390223:"IFCFURNISHINGELEMENTTYPE",3455213021:"IFCFLUIDFLOWPROPERTIES",315944413:"IFCFILLAREASTYLETILES",4203026998:"IFCFILLAREASTYLETILESYMBOLWITHSTYLE",374418227:"IFCFILLAREASTYLEHATCHING",2047409740:"IFCFACEBASEDSURFACEMODEL",477187591:"IFCEXTRUDEDAREASOLID",80994333:"IFCENERGYPROPERTIES",2835456948:"IFCELLIPSEPROFILEDEF",2777663545:"IFCELEMENTARYSURFACE",339256511:"IFCELEMENTTYPE",1883228015:"IFCELEMENTQUANTITY",1472233963:"IFCEDGELOOP",4006246654:"IFCDRAUGHTINGPREDEFINEDCURVEFONT",445594917:"IFCDRAUGHTINGPREDEFINEDCOLOUR",3073041342:"IFCDRAUGHTINGCALLOUT",526551008:"IFCDOORSTYLE",1714330368:"IFCDOORPANELPROPERTIES",2963535650:"IFCDOORLININGPROPERTIES",32440307:"IFCDIRECTION",4054601972:"IFCDIMENSIONCURVETERMINATOR",606661476:"IFCDIMENSIONCURVE",693772133:"IFCDEFINEDSYMBOL",2827736869:"IFCCURVEBOUNDEDPLANE",2601014836:"IFCCURVE",2147822146:"IFCCSGSOLID",2506170314:"IFCCSGPRIMITIVE3D",194851669:"IFCCRANERAILFSHAPEPROFILEDEF",4133800736:"IFCCRANERAILASHAPEPROFILEDEF",2485617015:"IFCCOMPOSITECURVESEGMENT",2205249479:"IFCCLOSEDSHELL",1383045692:"IFCCIRCLEPROFILEDEF",1416205885:"IFCCARTESIANTRANSFORMATIONOPERATOR3DNONUNIFORM",3331915920:"IFCCARTESIANTRANSFORMATIONOPERATOR3D",3486308946:"IFCCARTESIANTRANSFORMATIONOPERATOR2DNONUNIFORM",3749851601:"IFCCARTESIANTRANSFORMATIONOPERATOR2D",59481748:"IFCCARTESIANTRANSFORMATIONOPERATOR",1123145078:"IFCCARTESIANPOINT",2898889636:"IFCCSHAPEPROFILEDEF",2713105998:"IFCBOXEDHALFSPACE",2581212453:"IFCBOUNDINGBOX",4182860854:"IFCBOUNDEDSURFACE",2736907675:"IFCBOOLEANRESULT",2740243338:"IFCAXIS2PLACEMENT3D",3125803723:"IFCAXIS2PLACEMENT2D",4261334040:"IFCAXIS1PLACEMENT",1302238472:"IFCANNOTATIONSURFACE",2265737646:"IFCANNOTATIONFILLAREAOCCURRENCE",669184980:"IFCANNOTATIONFILLAREA",3288037868:"IFCANNOTATIONCURVEOCCURRENCE",2543172580:"IFCZSHAPEPROFILEDEF",1299126871:"IFCWINDOWSTYLE",512836454:"IFCWINDOWPANELPROPERTIES",336235671:"IFCWINDOWLININGPROPERTIES",2759199220:"IFCVERTEXLOOP",1417489154:"IFCVECTOR",427810014:"IFCUSHAPEPROFILEDEF",2347495698:"IFCTYPEPRODUCT",1628702193:"IFCTYPEOBJECT",1345879162:"IFCTWODIRECTIONREPEATFACTOR",2715220739:"IFCTRAPEZIUMPROFILEDEF",3124975700:"IFCTEXTLITERALWITHEXTENT",4282788508:"IFCTEXTLITERAL",3028897424:"IFCTERMINATORSYMBOL",3071757647:"IFCTSHAPEPROFILEDEF",230924584:"IFCSWEPTSURFACE",1260650574:"IFCSWEPTDISKSOLID",2247615214:"IFCSWEPTAREASOLID",1878645084:"IFCSURFACESTYLERENDERING",2513912981:"IFCSURFACE",2233826070:"IFCSUBEDGE",3653947884:"IFCSTRUCTURALSTEELPROFILEPROPERTIES",3843319758:"IFCSTRUCTURALPROFILEPROPERTIES",1190533807:"IFCSTRUCTURALLOADSINGLEFORCEWARPING",1597423693:"IFCSTRUCTURALLOADSINGLEFORCE",1973038258:"IFCSTRUCTURALLOADSINGLEDISPLACEMENTDISTORTION",2473145415:"IFCSTRUCTURALLOADSINGLEDISPLACEMENT",2668620305:"IFCSTRUCTURALLOADPLANARFORCE",1595516126:"IFCSTRUCTURALLOADLINEARFORCE",390701378:"IFCSPACETHERMALLOADPROPERTIES",1202362311:"IFCSOUNDVALUE",2485662743:"IFCSOUNDPROPERTIES",723233188:"IFCSOLIDMODEL",2609359061:"IFCSLIPPAGECONNECTIONCONDITION",4124623270:"IFCSHELLBASEDSURFACEMODEL",2411513650:"IFCSERVICELIFEFACTOR",1509187699:"IFCSECTIONEDSPINE",2778083089:"IFCROUNDEDRECTANGLEPROFILEDEF",478536968:"IFCRELATIONSHIP",3765753017:"IFCREINFORCEMENTDEFINITIONPROPERTIES",3413951693:"IFCREGULARTIMESERIES",3615266464:"IFCRECTANGLEPROFILEDEF",110355661:"IFCPROPERTYTABLEVALUE",3650150729:"IFCPROPERTYSINGLEVALUE",3357820518:"IFCPROPERTYSETDEFINITION",941946838:"IFCPROPERTYREFERENCEVALUE",2752243245:"IFCPROPERTYLISTVALUE",4166981789:"IFCPROPERTYENUMERATEDVALUE",1680319473:"IFCPROPERTYDEFINITION",871118103:"IFCPROPERTYBOUNDEDVALUE",673634403:"IFCPRODUCTDEFINITIONSHAPE",179317114:"IFCPREDEFINEDPOINTMARKERSYMBOL",433424934:"IFCPREDEFINEDDIMENSIONSYMBOL",2559016684:"IFCPREDEFINEDCURVEFONT",759155922:"IFCPREDEFINEDCOLOUR",2775532180:"IFCPOLYGONALBOUNDEDHALFSPACE",2924175390:"IFCPOLYLOOP",1423911732:"IFCPOINTONSURFACE",4022376103:"IFCPOINTONCURVE",2067069095:"IFCPOINT",1663979128:"IFCPLANAREXTENT",2004835150:"IFCPLACEMENT",597895409:"IFCPIXELTEXTURE",3021840470:"IFCPHYSICALCOMPLEXQUANTITY",2519244187:"IFCPATH",2529465313:"IFCPARAMETERIZEDPROFILEDEF",1029017970:"IFCORIENTEDEDGE",2665983363:"IFCOPENSHELL",2833995503:"IFCONEDIRECTIONREPEATFACTOR",219451334:"IFCOBJECTDEFINITION",1430189142:"IFCMECHANICALCONCRETEMATERIALPROPERTIES",2022407955:"IFCMATERIALDEFINITIONREPRESENTATION",2347385850:"IFCMAPPEDITEM",1008929658:"IFCLOOP",2624227202:"IFCLOCALPLACEMENT",3422422726:"IFCLIGHTSOURCESPOT",1520743889:"IFCLIGHTSOURCEPOSITIONAL",4266656042:"IFCLIGHTSOURCEGONIOMETRIC",2604431987:"IFCLIGHTSOURCEDIRECTIONAL",125510826:"IFCLIGHTSOURCEAMBIENT",1402838566:"IFCLIGHTSOURCE",3741457305:"IFCIRREGULARTIMESERIES",3905492369:"IFCIMAGETEXTURE",2445078500:"IFCHYGROSCOPICMATERIALPROPERTIES",812098782:"IFCHALFSPACESOLID",178086475:"IFCGRIDPLACEMENT",3590301190:"IFCGEOMETRICSET",4142052618:"IFCGEOMETRICREPRESENTATIONSUBCONTEXT",2453401579:"IFCGEOMETRICREPRESENTATIONITEM",3448662350:"IFCGEOMETRICREPRESENTATIONCONTEXT",1446786286:"IFCGENERALPROFILEPROPERTIES",803998398:"IFCGENERALMATERIALPROPERTIES",3857492461:"IFCFUELPROPERTIES",738692330:"IFCFILLAREASTYLE",4219587988:"IFCFAILURECONNECTIONCONDITION",3008276851:"IFCFACESURFACE",803316827:"IFCFACEOUTERBOUND",1809719519:"IFCFACEBOUND",2556980723:"IFCFACE",1860660968:"IFCEXTENDEDMATERIALPROPERTIES",476780140:"IFCEDGECURVE",3900360178:"IFCEDGE",4170525392:"IFCDRAUGHTINGPREDEFINEDTEXTFONT",3732053477:"IFCDOCUMENTREFERENCE",1694125774:"IFCDIMENSIONPAIR",2273265877:"IFCDIMENSIONCALLOUTRELATIONSHIP",3632507154:"IFCDERIVEDPROFILEDEF",3800577675:"IFCCURVESTYLE",2889183280:"IFCCONVERSIONBASEDUNIT",3050246964:"IFCCONTEXTDEPENDENTUNIT",45288368:"IFCCONNECTIONPOINTECCENTRICITY",1981873012:"IFCCONNECTIONCURVEGEOMETRY",370225590:"IFCCONNECTEDFACESET",1485152156:"IFCCOMPOSITEPROFILEDEF",2542286263:"IFCCOMPLEXPROPERTY",776857604:"IFCCOLOURRGB",647927063:"IFCCLASSIFICATIONREFERENCE",3150382593:"IFCCENTERLINEPROFILEDEF",616511568:"IFCBLOBTEXTURE",2705031697:"IFCARBITRARYPROFILEDEFWITHVOIDS",1310608509:"IFCARBITRARYOPENPROFILEDEF",3798115385:"IFCARBITRARYCLOSEDPROFILEDEF",2297822566:"IFCANNOTATIONTEXTOCCURRENCE",3612888222:"IFCANNOTATIONSYMBOLOCCURRENCE",962685235:"IFCANNOTATIONSURFACEOCCURRENCE",2442683028:"IFCANNOTATIONOCCURRENCE",1065908215:"IFCWATERPROPERTIES",891718957:"IFCVIRTUALGRIDINTERSECTION",1907098498:"IFCVERTEXPOINT",3304826586:"IFCVERTEXBASEDTEXTUREMAP",2799835756:"IFCVERTEX",180925521:"IFCUNITASSIGNMENT",1735638870:"IFCTOPOLOGYREPRESENTATION",1377556343:"IFCTOPOLOGICALREPRESENTATIONITEM",581633288:"IFCTIMESERIESVALUE",1718945513:"IFCTIMESERIESREFERENCERELATIONSHIP",3101149627:"IFCTIMESERIES",3317419933:"IFCTHERMALMATERIALPROPERTIES",1210645708:"IFCTEXTUREVERTEX",2552916305:"IFCTEXTUREMAP",1742049831:"IFCTEXTURECOORDINATEGENERATOR",280115917:"IFCTEXTURECOORDINATE",1484833681:"IFCTEXTSTYLEWITHBOXCHARACTERISTICS",1640371178:"IFCTEXTSTYLETEXTMODEL",2636378356:"IFCTEXTSTYLEFORDEFINEDFONT",1983826977:"IFCTEXTSTYLEFONTMODEL",1447204868:"IFCTEXTSTYLE",912023232:"IFCTELECOMADDRESS",531007025:"IFCTABLEROW",985171141:"IFCTABLE",1290481447:"IFCSYMBOLSTYLE",626085974:"IFCSURFACETEXTURE",1351298697:"IFCSURFACESTYLEWITHTEXTURES",846575682:"IFCSURFACESTYLESHADING",1607154358:"IFCSURFACESTYLEREFRACTION",3303107099:"IFCSURFACESTYLELIGHTING",1300840506:"IFCSURFACESTYLE",3049322572:"IFCSTYLEDREPRESENTATION",3958052878:"IFCSTYLEDITEM",2830218821:"IFCSTYLEMODEL",3408363356:"IFCSTRUCTURALLOADTEMPERATURE",2525727697:"IFCSTRUCTURALLOADSTATIC",2162789131:"IFCSTRUCTURALLOAD",2273995522:"IFCSTRUCTURALCONNECTIONCONDITION",3692461612:"IFCSIMPLEPROPERTY",4240577450:"IFCSHAPEREPRESENTATION",3982875396:"IFCSHAPEMODEL",867548509:"IFCSHAPEASPECT",4165799628:"IFCSECTIONREINFORCEMENTPROPERTIES",2042790032:"IFCSECTIONPROPERTIES",448429030:"IFCSIUNIT",2341007311:"IFCROOT",3679540991:"IFCRIBPLATEPROFILEPROPERTIES",1660063152:"IFCREPRESENTATIONMAP",3008791417:"IFCREPRESENTATIONITEM",3377609919:"IFCREPRESENTATIONCONTEXT",1076942058:"IFCREPRESENTATION",1222501353:"IFCRELAXATION",1580146022:"IFCREINFORCEMENTBARPROPERTIES",2692823254:"IFCREFERENCESVALUEDOCUMENT",825690147:"IFCQUANTITYWEIGHT",2405470396:"IFCQUANTITYVOLUME",3252649465:"IFCQUANTITYTIME",931644368:"IFCQUANTITYLENGTH",2093928680:"IFCQUANTITYCOUNT",2044713172:"IFCQUANTITYAREA",3710013099:"IFCPROPERTYENUMERATION",148025276:"IFCPROPERTYDEPENDENCYRELATIONSHIP",3896028662:"IFCPROPERTYCONSTRAINTRELATIONSHIP",2598011224:"IFCPROPERTY",2802850158:"IFCPROFILEPROPERTIES",3958567839:"IFCPROFILEDEF",2267347899:"IFCPRODUCTSOFCOMBUSTIONPROPERTIES",2095639259:"IFCPRODUCTREPRESENTATION",2417041796:"IFCPRESENTATIONSTYLEASSIGNMENT",3119450353:"IFCPRESENTATIONSTYLE",1304840413:"IFCPRESENTATIONLAYERWITHSTYLE",2022622350:"IFCPRESENTATIONLAYERASSIGNMENT",1775413392:"IFCPREDEFINEDTEXTFONT",3213052703:"IFCPREDEFINEDTERMINATORSYMBOL",990879717:"IFCPREDEFINEDSYMBOL",3727388367:"IFCPREDEFINEDITEM",3355820592:"IFCPOSTALADDRESS",2226359599:"IFCPHYSICALSIMPLEQUANTITY",2483315170:"IFCPHYSICALQUANTITY",101040310:"IFCPERSONANDORGANIZATION",2077209135:"IFCPERSON",1207048766:"IFCOWNERHISTORY",1411181986:"IFCORGANIZATIONRELATIONSHIP",4251960020:"IFCORGANIZATION",1227763645:"IFCOPTICALMATERIALPROPERTIES",2251480897:"IFCOBJECTIVE",3701648758:"IFCOBJECTPLACEMENT",1918398963:"IFCNAMEDUNIT",2706619895:"IFCMONETARYUNIT",3368373690:"IFCMETRIC",677618848:"IFCMECHANICALSTEELMATERIALPROPERTIES",4256014907:"IFCMECHANICALMATERIALPROPERTIES",2597039031:"IFCMEASUREWITHUNIT",3265635763:"IFCMATERIALPROPERTIES",2199411900:"IFCMATERIALLIST",1303795690:"IFCMATERIALLAYERSETUSAGE",3303938423:"IFCMATERIALLAYERSET",248100487:"IFCMATERIALLAYER",1847130766:"IFCMATERIALCLASSIFICATIONRELATIONSHIP",1838606355:"IFCMATERIAL",30780891:"IFCLOCALTIME",1566485204:"IFCLIGHTINTENSITYDISTRIBUTION",4162380809:"IFCLIGHTDISTRIBUTIONDATA",3452421091:"IFCLIBRARYREFERENCE",2655187982:"IFCLIBRARYINFORMATION",3020489413:"IFCIRREGULARTIMESERIESVALUE",852622518:"IFCGRIDAXIS",3548104201:"IFCEXTERNALLYDEFINEDTEXTFONT",3207319532:"IFCEXTERNALLYDEFINEDSYMBOL",1040185647:"IFCEXTERNALLYDEFINEDSURFACESTYLE",2242383968:"IFCEXTERNALLYDEFINEDHATCHSTYLE",3200245327:"IFCEXTERNALREFERENCE",1648886627:"IFCENVIRONMENTALIMPACTVALUE",3796139169:"IFCDRAUGHTINGCALLOUTRELATIONSHIP",770865208:"IFCDOCUMENTINFORMATIONRELATIONSHIP",1154170062:"IFCDOCUMENTINFORMATION",1376555844:"IFCDOCUMENTELECTRONICFORMAT",2949456006:"IFCDIMENSIONALEXPONENTS",1045800335:"IFCDERIVEDUNITELEMENT",1765591967:"IFCDERIVEDUNIT",1072939445:"IFCDATEANDTIME",3510044353:"IFCCURVESTYLEFONTPATTERN",2367409068:"IFCCURVESTYLEFONTANDSCALING",1105321065:"IFCCURVESTYLEFONT",539742890:"IFCCURRENCYRELATIONSHIP",602808272:"IFCCOSTVALUE",1065062679:"IFCCOORDINATEDUNIVERSALTIMEOFFSET",347226245:"IFCCONSTRAINTRELATIONSHIP",613356794:"IFCCONSTRAINTCLASSIFICATIONRELATIONSHIP",1658513725:"IFCCONSTRAINTAGGREGATIONRELATIONSHIP",1959218052:"IFCCONSTRAINT",2732653382:"IFCCONNECTIONSURFACEGEOMETRY",4257277454:"IFCCONNECTIONPORTGEOMETRY",2614616156:"IFCCONNECTIONPOINTGEOMETRY",2859738748:"IFCCONNECTIONGEOMETRY",3264961684:"IFCCOLOURSPECIFICATION",3639012971:"IFCCLASSIFICATIONNOTATIONFACET",938368621:"IFCCLASSIFICATIONNOTATION",1098599126:"IFCCLASSIFICATIONITEMRELATIONSHIP",1767535486:"IFCCLASSIFICATIONITEM",747523909:"IFCCLASSIFICATION",622194075:"IFCCALENDARDATE",2069777674:"IFCBOUNDARYNODECONDITIONWARPING",1387855156:"IFCBOUNDARYNODECONDITION",3367102660:"IFCBOUNDARYFACECONDITION",1560379544:"IFCBOUNDARYEDGECONDITION",4037036970:"IFCBOUNDARYCONDITION",3869604511:"IFCAPPROVALRELATIONSHIP",390851274:"IFCAPPROVALPROPERTYRELATIONSHIP",2080292479:"IFCAPPROVALACTORRELATIONSHIP",130549933:"IFCAPPROVAL",1110488051:"IFCAPPLIEDVALUERELATIONSHIP",411424972:"IFCAPPLIEDVALUE",639542469:"IFCAPPLICATION",618182010:"IFCADDRESS",3630933823:"IFCACTORROLE",599546466:"FILE_DESCRIPTION",1390159747:"FILE_NAME",1109904537:"FILE_SCHEMA"};class QE extends Set{constructor(E){super(E);O(this,"onUpdated",new LE);O(this,"onItemAdded",new LE);O(this,"onBeforeDelete",new LE);O(this,"onItemDeleted",new LE);O(this,"onCleared",new LE);O(this,"guard",()=>!0)}set eventsEnabled(E){this.onUpdated.enabled=E,this.onItemAdded.enabled=E,this.onItemDeleted.enabled=E,this.onBeforeDelete.enabled=E,this.onCleared.enabled=E}clear(){for(const E of this)this.onBeforeDelete.trigger(E);super.clear(),this.onCleared.trigger(),this.onUpdated.trigger()}add(...E){for(const e of E)this.has(e)||!(this.guard??(()=>!0))(e)||(super.add(e),this.onItemAdded||(this.onItemAdded=new LE),this.onItemAdded.trigger(e));return this.onUpdated||(this.onUpdated=new LE),this.onUpdated.trigger(),this}delete(E){if(!this.has(E))return!1;this.onBeforeDelete.trigger(E);const s=super.delete(E);return s&&(this.onItemDeleted.trigger(),this.onUpdated.trigger()),s}deleteIf(E){for(const e of this)E(e)&&this.delete(e)}getIndex(E){let e=0;for(const s of this){if(s===E)return e;e++}return-1}dispose(){this.clear(),this.onItemAdded.reset(),this.onItemDeleted.reset(),this.onCleared.reset(),this.onBeforeDelete.reset(),this.onUpdated.reset()}}class LC{constructor(I,E){O(this,"_lengthUnitsFactor",1);O(this,"_attributesOffsets",[]);O(this,"_relationsMap",{});O(this,"_guids",[]);O(this,"_guidsItems",[]);O(this,"_uniqueAttributes",new Set);O(this,"_uniqueRelNames",new Set);O(this,"_maxLocalID",0);O(this,"_ifcApi",null);O(this,"wasm",{path:"/node_modules/web-ifc/",absolute:!1});O(this,"webIfcSettings",{});O(this,"expressIDs",[]);O(this,"classes",[]);this._serializer=I,this._builder=E}async getIfcApi(){if(!this._ifcApi){const I=new YE;I.SetWasmPath(this.wasm.path,this.wasm.absolute),await I.Init(),I.SetLogLevel($E.LOG_LEVEL_OFF),this._ifcApi=I}return this._ifcApi}async getSchema(I=0){const e=(await this.getIfcApi()).GetModelSchema(I);if(!e)throw new Error("Fragments: IFC Schema not found");return e.startsWith("IFC2X3")?"IFC2X3":e.startsWith("IFC4")&&e.replace("IFC4","")===""?"IFC4":e.startsWith("IFC4X")?"IFC4X3":e}async process(I){var G,v,U;const E=await this.getIfcApi();if(this._maxLocalID=I.maxLocalID+1,I.readFromCallback)E.OpenModelFromCallback(I.readCallback,this.webIfcSettings);else if(I.bytes)await E.OpenModel(I.bytes,this.webIfcSettings);else throw new Error("Fragments: No data provided");this._serializer.replaceStoreyElevation&&await this.setLengthUnitsFactor();const e=E.GetAllTypesOfModel(0).map(L=>L.typeID),s=await this.getSchema();if(!RI[s])throw new Error("Fragments: Model schema not recognized.");const C=I.geometryProcessedLocalIDs;await this.processItems(C);const F=new Set(C);(G=I.progressCallback)==null||G.call(I,.6,{process:"attributes",state:"start",entitiesProcessed:C.length});const t=new Set([...this._serializer.classes.abstract,...this._serializer.classes.elements]),A=e.filter(L=>t.has(L)),n=.15/A.length;for(const[L,V]of A.entries()){const z=E.GetLineIDsWithType(0,V);if(z.size()===0)continue;const u=[];for(let x=0;x<z.size();x++){const $=z.get(x);F.has($)||u.push($)}u.length!==0&&(await this.processItems(u),(v=I.progressCallback)==null||v.call(I,n*(L+1)+.6,{process:"attributes",state:L+1===A.length?"finish":"inProgress",class:hE[V],entitiesProcessed:u.length}))}const r=I.alignments;r&&this.processAlignments(r);const N=new Set([...this._serializer.relations.keys()]),R=e.filter(L=>N.has(L)),a=.15/R.length;for(const[L,V]of R.entries()){const z=L===0?"start":L+1===R.length?"finish":"inProgress";await this.processRelations([V]),(U=I.progressCallback)==null||U.call(I,a*(L+1)+.75,{process:"relations",state:z,class:hE[V]})}const{relIndicesVector:c,relsVector:o}=this.getRelationsVector(),{guidsVector:S,guidsItemsVector:M}=this.getGuidsVector(),X=await this.getMetadataOffset(),w=this.getAttributesVector(),b=this.getUniqueAttributesVector(),B=this.getRelNamesVector(),W=g.createLocalIdsVector(this._builder,this.expressIDs),p=this.getCategoriesVector(),f=await this.getSpatialStructureOffset();return this.clean(),{relIndicesVector:c,relsVector:o,guidsVector:S,guidsItemsVector:M,metadataOffset:X,attributesVector:w,localIdsVector:W,categoriesVector:p,spatialStrutureOffset:f,uniqueAttributesVector:b,relNamesVector:B,newMaxLocalID:this._maxLocalID}}async processItems(I){const E=await this.getIfcApi();for(let e=0;e<I.length;e++){const s=I[e];try{const T=E.GetLine(0,s);if(!T)continue;const C=hE[T.type];this.classes.push(C),this.expressIDs.push(s),await this.serializeAttributes(s,T)}catch(T){console.log(`Problem reading properties for ${s}`),console.log(T),await new Promise(C=>{setTimeout(C,100)});continue}}}async processAlignments(I){for(const E of I){const e=this._maxLocalID++,s=JSON.stringify(E),F=JSON.stringify(["data",s,"UNDEFINED"]),t=this._builder.createSharedString(F);this._serializer.includeUniqueAttributes&&this._uniqueAttributes.add(F);const A=uE.createDataVector(this._builder,[t]),n=uE.createAttribute(this._builder,A);this.classes.push(sI),this.expressIDs.push(e),this._attributesOffsets.push(n)}}addRelation(I,E,e){this._relationsMap[I]||(this._relationsMap[I]={}),this._relationsMap[I][E]||(this._relationsMap[I][E]=[]);for(const s of e)this._relationsMap[I][E].push(s);this._serializer.includeRelationNames&&this._uniqueRelNames.add(E)}async getStoreyElevation(I,E){const e=await this.getIfcApi(),s=e.GetLine(0,I);let T;s!=null&&s.RelativePlacement&&"value"in s.RelativePlacement&&typeof s.RelativePlacement.value=="number"&&(T=e.GetLine(0,s.RelativePlacement.value));let C;T!=null&&T.Location&&"value"in T.Location&&typeof T.Location.value=="number"&&(C=e.GetLine(0,T.Location.value)),C!=null&&C.Coordinates&&Array.isArray(C.Coordinates)&&"value"in C.Coordinates[2]&&typeof C.Coordinates[2].value=="number"&&(E.value+=C.Coordinates[2].value),s!=null&&s.PlacementRelTo&&"value"in s.PlacementRelTo&&typeof s.PlacementRelTo.value=="number"&&await this.getStoreyElevation(s.PlacementRelTo.value,E)}async setLengthUnitsFactor(){var e,s,T,C;const I=await this.getIfcApi(),E=I.GetLineIDsWithType(0,TI);if(E.size()!==0)for(let F=0;F<E.size();F++){const t=E.get(F),A=I.GetLine(0,t);for(const n of A.Units){const r=I.GetLine(0,n.value);if(((e=r.UnitType)==null?void 0:e.value)!=="LENGTHUNIT")continue;let R=1,a=1;r.Name.value==="METRE"&&(a=1),r.Name.value==="FOOT"&&(a=.3048),((s=r.Prefix)==null?void 0:s.value)==="MILLI"?R=.001:((T=r.Prefix)==null?void 0:T.value)==="CENTI"?R=.01:((C=r.Prefix)==null?void 0:C.value)==="DECI"&&(R=.1),this._lengthUnitsFactor=a*R}}}async serializeAttributes(I,E){const e=[];let s=null;if(this._serializer.replaceStoreyElevation&&E.type&&typeof E.type=="number"&&E.type===VE&&E.Elevation&&"value"in E.Elevation){const F={value:0};E.ObjectPlacement&&"value"in E.ObjectPlacement&&typeof E.ObjectPlacement.value=="number"&&await this.getStoreyElevation(E.ObjectPlacement.value,F),E.Elevation.value=F.value*this._lengthUnitsFactor}for(const[F,t]of Object.entries(E)){if(typeof t=="number"||this._serializer.attributesToExclude.has(F)||t===null||t===void 0)continue;if(Array.isArray(t)){const r=t.filter(a=>a.type!==5);if(r.length>0){const a=r.map(X=>X.value),c=[F,a],o="name"in r[0]&&r[0].name?r[0].name:r[0].constructor.name.toUpperCase();c.push(o!=="OBJECT"?o:"UNDEFINED");const S=JSON.stringify(c),M=this._builder.createSharedString(S);e.push(M)}const R=t.filter(a=>a.type===5).map(a=>a.value);this.addRelation(I,F,R);continue}const{value:A,type:n}=t;if(n===5){if(typeof A!="number")continue;this.addRelation(I,F,[A])}else{if(F==="GlobalId"&&typeof A=="string"){s=A;continue}const r=[F,A],N="name"in t&&t.name?t.name:t.constructor.name.toUpperCase();r.push(N!=="OBJECT"?N:"UNDEFINED");const R=JSON.stringify(r),a=this._builder.createSharedString(R);e.push(a),this._serializer.includeUniqueAttributes&&this._uniqueAttributes.add(R)}}const T=uE.createDataVector(this._builder,e),C=uE.createAttribute(this._builder,T);this._attributesOffsets.push(C),s&&(this._guids.push(s),this._guidsItems.push(I))}getAttributesVector(){return g.createAttributesVector(this._builder,this._attributesOffsets)}getUniqueAttributesVector(){const I=[];for(const e of this._uniqueAttributes){const s=this._builder.createSharedString(e);I.push(s)}return g.createUniqueAttributesVector(this._builder,I)}getRelNamesVector(){const I=[];for(const e of this._uniqueRelNames){const s=this._builder.createSharedString(e);I.push(s)}return g.createRelationNamesVector(this._builder,I)}getGuidsVector(){const I=[];for(const s of this._guids){const T=this._builder.createString(s);I.push(T)}const E=g.createGuidsVector(this._builder,I),e=g.createGuidsItemsVector(this._builder,this._guidsItems);return{guidsVector:E,guidsItemsVector:e}}async processRelations(I){const E=await this.getIfcApi();for(const e of I){const s=this._serializer.relations.get(e);if(!s)continue;const{forRelating:T,forRelated:C}=s,F=E.GetLineIDsWithType(0,e);if(F.size()!==0)for(let t=0;t<F.size();t++){const A=F.get(t);try{const n=E.GetLine(0,A);if(!n)continue;const r=Object.keys(n),N=r.find(o=>o.startsWith("Relating")),R=r.find(o=>o.startsWith("Related"));if(!(N&&R))continue;const a=n[N].value,c=n[R].map(({value:o})=>o);this.addRelation(a,T,c);for(const o of c)this.addRelation(o,C,[a])}catch(n){console.log(`Problem reading relations for ${A}`),console.log(n),await new Promise(r=>{setTimeout(r,100)});continue}}}}getRelationsVector(I=!1){const E=[],e=[];for(const[C,F]of Object.entries(this._relationsMap)){if(I&&!this.expressIDs.includes(Number(C)))continue;const t=[];for(const[r,N]of Object.entries(F)){let R=N;if(I&&(R=N.filter(o=>this.expressIDs.includes(o)),R.length===0))continue;const a=JSON.stringify([r,...R]),c=this._builder.createSharedString(a);t.push(c)}if(I&&t.length===0)continue;e.push(Number(C));const A=BE.createDataVector(this._builder,t),n=BE.createRelation(this._builder,A);E.push(n)}const s=g.createRelationsVector(this._builder,E);return{relIndicesVector:g.createRelationsItemsVector(this._builder,e),relsVector:s}}getCategoriesVector(){const I=this.classes.map(e=>this._builder.createSharedString(e));return g.createCategoriesVector(this._builder,I)}async getMetadataOffset(){const e={schema:(await this.getIfcApi()).GetModelSchema(0)};return this._builder.createString(JSON.stringify(e))}getEntityDecomposition(I,E){var C;const e=[];for(const F of E){const t=(C=this._relationsMap[I])==null?void 0:C[F];if(!t)continue;const A={};for(const n of t){const r=this.expressIDs.indexOf(n);if(r===-1)continue;const N=this.classes[r];N&&(A[N]||(A[N]=[]),A[N].push(n))}for(const n in A){const N=A[n].map(o=>this.getEntityDecomposition(o,E)),R=q.createChildrenVector(this._builder,N),a=this._builder.createSharedString(n);q.startSpatialStructure(this._builder),q.addCategory(this._builder,a),q.addChildren(this._builder,R);const c=q.endSpatialStructure(this._builder);e.push(c)}}const s=q.createChildrenVector(this._builder,e);return q.startSpatialStructure(this._builder),q.addLocalId(this._builder,I),q.addChildren(this._builder,s),q.endSpatialStructure(this._builder)}async getSpatialStructureOffset(){const I=await this.getIfcApi(),E=yE,s=[...I.GetLineIDsWithType(0,E)].map(t=>this.getEntityDecomposition(t,["IsDecomposedBy","ContainsElements"])),T=this._builder.createSharedString("IFCPROJECT"),C=q.createChildrenVector(this._builder,s);return q.startSpatialStructure(this._builder),q.addCategory(this._builder,T),q.addChildren(this._builder,C),q.endSpatialStructure(this._builder)}clean(){var I;(I=this._ifcApi)==null||I.Dispose(),this._ifcApi=null,this._guids=[],this._guidsItems=[],this._attributesOffsets=[],this._relationsMap={},this._uniqueAttributes.clear(),this._uniqueRelNames.clear(),this.expressIDs=[],this.classes=[]}}class lC{read(I){try{const E=I.GetAllAlignments(0),e=[];for(const s of E){const T={absolute:[],horizontal:[],vertical:[]};e.push(T);let C=0;for(let F=0;F<s.horizontal.length;F++){const t=s.curve3D[0].points,A=s.horizontal[F],n=[],r=[],N=this.getCurveType(A.data[1]),R=[],a=[];for(const c of A.points){const{x:o,y:S,z:M}=t[C++];R.push([o,S,M]),a.push([c.x,c.y])}R.reverse(),a.reverse();for(const[c,o,S]of R)n.push(c,o,S);for(const[c,o]of a)r.push(c,0,-o);T.absolute.push({points:n,type:N}),T.horizontal.push({points:r,type:N})}for(let F=0;F<s.vertical.length;F++){const t=s.vertical[F],A=[],n=this.getCurveType(t.data[1]),r=[];for(const N of t.points)r.push([N.x,N.y]);r.reverse();for(const[N,R]of r)A.push(N,R,0);T.vertical.push({points:A,type:n})}}return e}catch(E){return console.error(E),[]}}getCurveType(I){if(I.includes("CIRCULARARC"))return fE.ELLIPSE_ARC;if(I.includes("LINE")||I.includes("GRADIENT"))return fE.LINES;if(I.includes("CLOTHOID"))return fE.CLOTHOID;if(I.includes("PARABOLICARC"))return fE.PARABOLA;throw new Error(`Fragments: Unknown curve type: ${I}`)}}class PC{constructor(I){O(this,"_ifcAPI",null);O(this,"wasm",{path:"../../../../node_modules/web-ifc/",absolute:!1});O(this,"webIfcSettings",{});O(this,"_tempObject1",new xE);O(this,"_tempObject2",new xE);O(this,"_tempMatrix1",new gE);O(this,"_previousGeometries",new Map);O(this,"_previousGeometriesIDs",new Map);O(this,"_previousGeometriesScales",new Map);O(this,"_previousLocalTransforms",new Map);O(this,"_problematicGeometries",new Set);O(this,"_problematicGeometriesHashes",new Set);O(this,"_coordinatesInitialized",!1);O(this,"_civilReader",new lC);O(this,"_nextId",0);O(this,"_rawCategories",new Set([jE,JE]));O(this,"scene",null);O(this,"isolatedMeshes",null);O(this,"onElementLoaded",()=>{});O(this,"onGeometryLoaded",()=>{});O(this,"onLocalTransformLoaded",()=>{});O(this,"onNextIdFound",()=>{});O(this,"onCoordinatesLoaded",()=>{});O(this,"onAlignmentsLoaded",()=>{});this._serializer=I}async load(I){var C,F,t;(C=I.progressCallback)==null||C.call(I,0,{process:"conversion",state:"start"}),this._previousGeometriesIDs.clear(),this._ifcAPI=new YE,this._ifcAPI.SetWasmPath(this.wasm.path,this.wasm.absolute),await this._ifcAPI.Init();let E=0;if(I.readFromCallback&&I.readCallback)E=this._ifcAPI.OpenModelFromCallback(I.readCallback,this.webIfcSettings);else if(I.bytes)E=await this._ifcAPI.OpenModel(I.bytes,this.webIfcSettings);else throw new Error("Fragments: No data provided");this._ifcAPI.SetLogLevel($E.LOG_LEVEL_OFF),this._nextId=this._ifcAPI.GetMaxExpressID(E)+1,this.onLocalTransformLoaded({id:0,data:[0,0,0,1,0,0,0,1,0]});const e=new Z,s=A=>{if(this._ifcAPI===null)throw new Error("Fragments: IfcAPI not initialized");if(!this._coordinatesInitialized){const G=this._ifcAPI.GetCoordinationMatrix(E);this._tempMatrix1.fromArray(G);const v=this.decompose(this._tempMatrix1);this.onCoordinatesLoaded(v),this._coordinatesInitialized=!0}const n=this._ifcAPI.GetLine(0,A.expressID),r={id:A.expressID,type:n.type,guid:n.GlobalId.value,geometries:[]},N=A.geometries.size(),a=A.geometries.get(0).flatTransformation,{transformWithoutScale:c}=this.removeScale(a),o=this._serializer.distanceThreshold;if(o!==null&&(e.set(0,0,0),e.applyMatrix4(c),e.x>o||e.y>o||e.z>o)){console.log(`Object ${r.id} is more than ${o} meters away from the origin and will be skipped.`);return}for(let G=0;G<N;G++)r.type===qE?this.loadCircleExtrusionGeometry(E,r,A,G,c.elements):this.loadShellGeometry(E,r,A,G,c.elements);const{dxx:S,dxy:M,dxz:X,dyx:w,dyy:b,dyz:B,px:W,py:p,pz:f}=this.decompose(c);r.geometries.length>0&&this.onElementLoaded({element:r,position:[W,p,f],xDirection:[S,M,X],yDirection:[w,b,B]})};if((F=this.isolatedMeshes)!=null&&F.size)this._ifcAPI.StreamMeshes(E,Array.from(this.isolatedMeshes),s);else{const n=this._ifcAPI.GetAllTypesOfModel(E).map(N=>N.typeID).filter(N=>this._serializer.classes.elements.has(N));n.includes(GE)&&n.splice(n.indexOf(GE),1),n.push(GE);const r=.5/n.length;for(const[N,R]of n.entries()){const a=N===0?"start":N+1===n.length?"finish":"inProgress",c=this._ifcAPI.GetLineIDsWithType(E,R),o=[];for(let S=0;S<c.size();S++)o.push(c.get(S));o.length>0&&(this._ifcAPI.StreamMeshes(E,o,s),(t=I.progressCallback)==null||t.call(I,r*(N+1),{process:"geometries",state:a,class:hE[R],entitiesProcessed:o.length}))}}const T=this._civilReader.read(this._ifcAPI);this.onAlignmentsLoaded(T),this.onNextIdFound(this._nextId),this._ifcAPI.Dispose(),this._ifcAPI=null,this._ifcAPI=new YE,this._ifcAPI.SetWasmPath(this.wasm.path,this.wasm.absolute),await this._ifcAPI.Init(),this._previousGeometries.clear(),this._previousGeometriesIDs.clear(),this._previousGeometriesScales.clear(),this._nextId=0,this._previousLocalTransforms.clear(),this._problematicGeometries.clear(),this._problematicGeometriesHashes.clear()}loadCircleExtrusionGeometry(I,E,e,s,T){if(this._ifcAPI===null)throw new Error("Fragments: IfcAPI not initialized");const C=e.geometries.get(s),F=C.flatTransformation,{units:t}=this.removeScale(F),{x:A,y:n,z:r,w:N}=C.color,R={id:C.geometryExpressID,color:[A,n,r,N],localTransformID:null};E.geometries.push(R);const{transformWithoutScale:a}=this.removeScale(C.flatTransformation);if(this._previousGeometriesIDs.has(R.id)){this.getLocalTransform(T,a,R),R.id=this._previousGeometriesIDs.get(R.id);return}this.getLocalTransform(T,a,R);const c=this._ifcAPI.GetGeometry(I,R.id),o=c.GetSweptDiskSolid(),S=[],M=[],X=o.axis.size();for(let U=0;U<X;U++){const L=o.axis.get(U),V=[];for(let u=0;u<L.arcSegments.size();u++)V.push(L.arcSegments.get(u));S.push(V);const z=[];for(let u=0;u<L.points.size();u++){const x=L.points.get(u);z.push({x:x.x*t.x,y:x.y*t.y,z:x.z*t.z})}M.push(z)}const w=[],b=[],B=[],W=[];for(let U=0;U<M.length;U++){const L=M[U],V=S[U],z=L.length;for(let u=0;u<z-1;u++){let x=-1,$=-1;for(let j=0;j<V.length;j+=2)if(V[j]===u){x=u,$=V[j+1];break}if(x===-1){const j=[],EE=L[u],tE=L[u+1],aE=EE.x,J=EE.y,CE=EE.z,FE=tE.x,K=tE.y,D=tE.z;w.push(B.length),j.push(aE,J,CE,FE,K,D),B.push(j),b.push(HE.WIRE)}else{const j=[],EE=x,tE=Math.round((x+$)/2),aE=$,J=L[EE],CE=L[tE],FE=L[aE],K=this.computeCircleCurveProperties(J,CE,FE),D=J.x-K.center.x,oE=J.y-K.center.y,nE=J.z-K.center.z;let i=Math.sqrt(D*D+oE*oE+nE*nE);i===0&&(i=1);const P=D/i,d=oE/i,l=nE/i,m=CE.x-K.center.x,y=CE.y-K.center.y,H=CE.z-K.center.z;let Q=Math.sqrt(m*m+y*y+H*H);Q===0&&(Q=1);const sE=m/Q,iE=y/Q,AE=H/Q;let _=this.crossProduct({x:P,y:d,z:l},{x:sE,y:iE,z:AE});i=Math.sqrt(_.x*_.x+_.y*_.y+_.z*_.z),i===0&&(i=1),_={x:_.x/i,y:_.y/i,z:_.z/i},w.push(W.length),j.push(K.center.x,K.center.y,K.center.z,K.radius,K.angle,P,d,l,_.x,_.y,_.z),W.push(j),b.push(HE.CIRCLE_CURVE),u=aE-1}}}const p=this.getGeometryBuffers(I,C);if(p===null){console.log(`Zero length geometry: ${R.id}`),E.geometries.pop(),this._problematicGeometries.add(R.id);return}const{position:f}=p;for(let U=0;U<f.length-2;U+=3)f[U]*=t.x,f[U+1]*=t.y,f[U+2]*=t.z;const G=Y.getAABB(f),v=o.profileRadius*t.x;this._previousGeometriesIDs.set(R.id,R.id),this.onGeometryLoaded({id:R.id,geometry:{type:bE.CIRCLE_EXTRUSION,indicesArray:w,typesArray:b,segments:B,circleCurveData:W,radius:v,bbox:G}}),c.delete()}loadShellGeometry(I,E,e,s,T){if(this._ifcAPI===null)throw new Error("Fragments: IfcAPI not initialized");const C=e.geometries.get(s),F=C.flatTransformation,{units:t}=this.removeScale(F);if(this._problematicGeometries.has(C.geometryExpressID)){console.log(` Problematic geometry: ${C.geometryExpressID}`);return}const{x:A,y:n,z:r,w:N}=C.color,R={id:C.geometryExpressID,color:[A,n,r,N],localTransformID:null};E.geometries.push(R);const{transformWithoutScale:a}=this.removeScale(C.flatTransformation);if(this._previousGeometriesIDs.has(R.id)){const D=this.getScaleHash(t);if(this._previousGeometriesScales.get(R.id)===D){this.getLocalTransform(T,a,R),R.id=this._previousGeometriesIDs.get(R.id);return}const i=this._nextId++;this._previousGeometriesScales.set(i,D),R.id=i}const c=this.getGeometryBuffers(I,C);if(c===null){console.log(`Zero length geometry: ${R.id}`),E.geometries.pop(),this._problematicGeometries.add(R.id);return}const{position:o,normals:S,index:M}=c;for(let D=0;D<o.length-2;D+=3)o[D]*=t.x,o[D+1]*=t.y,o[D+2]*=t.z;const X=o.length/3,w=M.length/3;let b=0,B=0;const W=new FI,p=new Z,f=new Z,G=new Z,v=this.getVolume(M,o),U=new Z;for(let D=0;D<M.length-2;D+=3){const oE=M[D],nE=M[D+1],i=M[D+2];p.set(o[oE*3],o[oE*3+1],o[oE*3+2]),f.set(o[nE*3],o[nE*3+1],o[nE*3+2]),G.set(o[i*3],o[i*3+1],o[i*3+2]),U.add(p),U.add(f),U.add(G),W.set(p,f,G);const P=W.getArea();P>b&&(b=P),B+=P}U.divideScalar(M.length),p.set(o[0],o[1],o[2]),f.set(o[3],o[4],o[5]),G.set(o[6],o[7],o[8]);const L=1e4,V=Y.round(B,L),z=Y.round(b,L),u=Y.round(v,L),x=Y.round(p.x,L),$=Y.round(p.y,L),j=Y.round(p.z,L),EE=Y.round(U.x,L),tE=Y.round(U.x,L),aE=Y.round(U.x,L),J=`${X}-${w}-${V}-${z}-${u}-${EE}-${tE}-${aE}-${x}-${$}-${j}`;if(this._problematicGeometriesHashes.has(J)){console.log(`Problematic geometry: ${R.id}`),E.geometries.pop(),this._problematicGeometries.add(R.id),this._problematicGeometriesHashes.add(J);return}const CE=!this._previousGeometries.has(J),FE=R.id;if(CE)this._previousGeometries.set(J,FE),this._previousGeometriesIDs.set(FE,FE);else{const D=this._previousGeometries.get(J);if(D===void 0)throw new Error("Fragments: Previous geometry not found");this._previousGeometriesIDs.set(FE,D),R.id=D}this.getLocalTransform(T,a,R);const K=this._rawCategories.has(E.type);if(CE)try{const D=Y.getShellData({position:o,normals:S,index:M,raw:K,settings:this._serializer.geometryProcessSettings});this.onGeometryLoaded({id:R.id,geometry:D})}catch{console.error(`Fragments: Problematic geometry: ${R.id}`),E.geometries.pop(),this._problematicGeometries.add(R.id),this._problematicGeometriesHashes.add(J)}}getScaleHash(I){return`${I.x}-${I.y}-${I.z}`}getLocalTransform(I,E,e){this._tempObject1.position.set(0,0,0),this._tempObject1.rotation.set(0,0,0),this._tempObject1.scale.set(1,1,1),this._tempObject1.updateMatrix(),this._tempMatrix1.fromArray(I),this._tempObject1.applyMatrix4(this._tempMatrix1),this._tempObject2.position.set(0,0,0),this._tempObject2.rotation.set(0,0,0),this._tempObject2.scale.set(1,1,1),this._tempObject2.updateMatrix(),this._tempObject2.applyMatrix4(E),this._tempObject1.attach(this._tempObject2);const{px:s,py:T,pz:C,dxx:F,dxy:t,dxz:A,dyx:n,dyy:r,dyz:N}=this.decompose(this._tempObject2.matrix);if(this._tempObject2.removeFromParent(),!(s===0&&T===0&&C===0&&F===1&&t===0&&A===0&&n===0&&r===1&&N===0)){const a=`${s}-${T}-${C}-${F}-${t}-${A}-${n}-${r}-${N}`,c=this._previousLocalTransforms.get(a);if(c)e.localTransformID=c.id;else{const S={id:this._previousLocalTransforms.size+1,data:[s,T,C,F,t,A,n,r,N]};this._previousLocalTransforms.set(a,S),e.localTransformID=S.id,this.onLocalTransformLoaded(S)}}}removeScale(I){const E=new gE().fromArray(I),e=new Z,s=new oI,T=new Z;E.decompose(e,s,T);const C=T,F=new gE;return F.compose(e,s,new Z(1,1,1)),{units:C,transformWithoutScale:F}}decompose(I){const s=Y.round(I.elements[0],1e3),T=Y.round(I.elements[1],1e3),C=Y.round(I.elements[2],1e3),F=Y.round(I.elements[4],1e5),t=Y.round(I.elements[5],1e5),A=Y.round(I.elements[6],1e5),n=Y.round(I.elements[8],1e5),r=Y.round(I.elements[9],1e5),N=Y.round(I.elements[10],1e5),R=Y.round(I.elements[12],1e5),a=Y.round(I.elements[13],1e5),c=Y.round(I.elements[14],1e5);return{dxx:s,dxy:T,dxz:C,dyx:F,dyy:t,dyz:A,dzx:n,dzy:r,dzz:N,px:R,py:a,pz:c}}getVolume(I,E){let e=0;const s=new Z,T=new Z,C=new Z;for(let F=0;F<I.length-2;F+=3){const t=I[F]*3,A=I[F+1]*3,n=I[F+2]*3;s.set(E[t],E[t+1],E[t+2]),T.set(E[A],E[A+1],E[A+2]),C.set(E[n],E[n+1],E[n+2]),e+=this.getSignedVolumeOfTriangle(s,T,C)}return Math.abs(e)}getSignedVolumeOfTriangle(I,E,e){const s=e.x*E.y*I.z,T=E.x*e.y*I.z,C=e.x*I.y*E.z,F=I.x*e.y*E.z,t=E.x*I.y*e.z,A=I.x*E.y*e.z;return 1/6*(-s+T+C-F-t+A)}getGeometryBuffers(I,E){if(!this._ifcAPI)throw new Error("Fragments: IfcAPI not initialized");const e=this._ifcAPI.GetGeometry(I,E.geometryExpressID),s=this._ifcAPI.GetIndexArray(e.GetIndexData(),e.GetIndexDataSize()),T=this._ifcAPI.GetVertexArray(e.GetVertexData(),e.GetVertexDataSize());if(s.length===0||T.length===0)return e.delete(),null;const C=new Float32Array(T.length/2),F=new Float32Array(T.length/2);for(let t=0;t<T.length;t+=6)C[t/2]=T[t],C[t/2+1]=T[t+1],C[t/2+2]=T[t+2],F[t/2]=T[t+3],F[t/2+1]=T[t+4],F[t/2+2]=T[t+5];return e.delete(),{position:C,normals:F,index:s}}crossProduct(I,E){return{x:I.y*E.z-I.z*E.y,y:I.z*E.x-I.x*E.z,z:I.x*E.y-I.y*E.x}}computeCircleCurveProperties(I,E,e){function s(S,M,X){const w=M.x-S.x,b=M.y-S.y,B=M.z-S.z,W=X.x-S.x,p=X.y-S.y,f=X.z-S.z,G=.5*(w**2+b**2+B**2),v=.5*(W**2+p**2+f**2),U=w*p-b*W,L=b*f-B*p,V=B*W-w*f,z=G*W-v*w,u=G*p-v*b,x=G*f-v*B,$=U**2+L**2+V**2;if($===0)throw new Error("Fragments: Points are collinear, no unique circle exists.");const j=S.x+(U*u-V*x)/$,EE=S.y+(L*x-U*z)/$,tE=S.z+(V*z-L*u)/$;return{x:j,y:EE,z:tE}}function T(S,M){return{x:S.x-M.x,y:S.y-M.y,z:S.z-M.z}}function C(S){return Math.sqrt(S.x*S.x+S.y*S.y+S.z*S.z)}const F=T(E,I),t=T(e,E),A=this.crossProduct(F,t),n=s(I,E,e),r=T(I,n),N=T(e,n),R=C(T(n,I)),a=T(I,n),c=C(a);a.x/=c,a.y/=c,a.z/=c;const o=Math.acos((r.x*N.x+r.y*N.y+r.z*N.z)/(C(r)*C(N)));return{center:n,radius:R,normal:A,initialTangent:a,angle:o*180/Math.PI}}}class UC{constructor(I){O(this,"wasm",{path:"../../../../node_modules/web-ifc/",absolute:!1});O(this,"webIfcSettings",{});O(this,"_serializer");this._serializer=I}async process(I){const{builder:E}=I;let e=0;const s=[];let T={dxx:1,dxy:0,dxz:0,dyx:0,dyy:1,dyz:0,px:0,py:0,pz:0};const C=[],F=[],t=[],A=[],n=new Map,r=new Map,N=new Map,R=new PC(this._serializer);R.wasm=this.wasm,R.webIfcSettings=this.webIfcSettings,R.onGeometryLoaded=i=>{C.push(i)},R.onElementLoaded=i=>{t.push(i)},R.onLocalTransformLoaded=i=>{A.push(i)},R.onCoordinatesLoaded=i=>{T=i},R.onNextIdFound=i=>{e=i},R.onAlignmentsLoaded=i=>{for(const P of i)F.push(P)},await R.load(I);const a=[];let c=0;h.startGlobalTransformsVector(E,t.length);const o=[],S=new Map,M=[];for(let i=0;i<t.length;i++){const P=t[t.length-1-i];a.push(c++);const{position:d,xDirection:l,yDirection:m}=P,[y,H,Q]=d,[sE,iE,AE]=l,[_,lE,UE]=m;s.push(t[i].element.id);const ME=t.length-1-i,DE=P.element.type,SE=hE[DE];S.has(SE)||S.set(SE,S.size),o.unshift(e++),pE.createTransform(E,y,H,Q,sE,iE,AE,_,lE,UE),S.get(SE),M.unshift(P.element.id),n.set(P.element.id,ME)}const X=E.endVector(),w=[];for(let i=0;i<C.length;i++){const P=C[i];if(P.geometry.type!==bE.SHELL)continue;const{points:d,profiles:l,holes:m,profilesFaceIds:y}=P.geometry,H=d.length>Y.ushortMaxValue,Q=H?_E.BIG:_E.NONE;cE.startPointsVector(E,d.length);for(let k=0;k<d.length;k++){const[rE,TE,RE]=d[d.length-1-k];iI.createFloatVector(E,rE,TE,RE)}const sE=E.endVector(),iE=[],AE=[],_=[],lE=[];for(const[,k]of l){if(H){const RE=wE.createIndicesVector(E,k),OE=wE.createBigShellProfile(E,RE);_.push(OE);continue}const rE=WE.createIndicesVector(E,k),TE=WE.createShellProfile(E,rE);iE.push(TE)}const UE=cE.createBigProfilesVector(E,_),ME=cE.createProfilesVector(E,iE);for(const[k,rE]of m){if(H){for(const TE of rE){const RE=zE.createIndicesVector(E,TE),OE=zE.createBigShellHole(E,RE,k);lE.push(OE)}continue}for(const TE of rE){const RE=vE.createIndicesVector(E,TE),OE=vE.createShellHole(E,RE,k);AE.push(OE)}}const DE=cE.createBigHolesVector(E,lE),SE=cE.createHolesVector(E,AE),NE=cE.createProfilesFaceIdsVector(E,y),dE=cE.createShell(E,ME,SE,sE,UE,DE,Q,NE);w.push(dE)}const b=h.createShellsVector(E,w),B=[];for(let i=0;i<C.length;i++){const P=C[i];if(P.geometry.type!==bE.CIRCLE_EXTRUSION)continue;const d=[],{radius:l,indicesArray:m,typesArray:y,segments:H,circleCurveData:Q}=P.geometry;IE.startCircleCurvesVector(E,Q.length);for(let NE=0;NE<Q.length;NE++){const[dE,k,rE,TE,RE,OE,kE,ZE,EI,II,eI]=Q[NE];AI.createCircleCurve(E,RE/360*2*Math.PI,dE,k,rE,TE,EI,II,eI,OE,kE,ZE)}const sE=E.endVector();IE.startWiresVector(E,H.length);for(let NE=0;NE<H.length;NE++){const[dE,k,rE,TE,RE,OE]=H[NE];rI.createWire(E,dE,k,rE,TE,RE,OE)}const iE=E.endVector(),AE=IE.createOrderVector(E,m),_=IE.createPartsVector(E,y);IE.startWireSetsVector(E,0);const lE=E.endVector();IE.startAxis(E),IE.addCircleCurves(E,sE),IE.addOrder(E,AE),IE.addWires(E,iE),IE.addWireSets(E,lE),IE.addParts(E,_);const UE=IE.endAxis(E);d.push(UE);const ME=PE.createAxesVector(E,d),DE=PE.createRadiusVector(E,[l]);PE.startCircleExtrusion(E),PE.addAxes(E,ME),PE.addRadius(E,DE);const SE=PE.endCircleExtrusion(E);B.push(SE)}const W=h.createCircleExtrusionsVector(E,B),p=[];h.startRepresentationsVector(E,C.length);const f=new Map;for(let i=0;i<C.length;i++){const P=C.length-1-i,l=C[P].geometry.type;let m=f.get(l);m===void 0&&(m=-1),f.set(l,m+1)}const G=new Z,v=new Z;for(let i=0;i<C.length;i++){const P=C.length-1-i,d=C[P],{bbox:l}=d.geometry;r.set(d.id,P);const m=d.geometry.type,y=f.get(m);if(y===void 0)throw new Error("Fragments: Malformed geometry definition");f.set(m,y-1),G.set(l.min.x,l.min.y,l.min.z),v.set(l.max.x,l.max.y,l.max.z),G.distanceTo(v)>999999&&(console.log(`Infinity bounding box: ${d.id}`),l.min.x=0,l.min.y=0,l.min.z=0,l.max.x=.1,l.max.y=.1,l.max.z=.1),p.unshift(e++),nI.createRepresentation(E,y,l.min.x,l.min.y,l.min.z,l.max.x,l.max.y,l.max.z,d.geometry.type)}const U=E.endVector();let L=0;for(const i of t)for(const P of i.element.geometries){const d=P.color.toString();if(!N.has(d)){const l=P.color.map(m=>m*255);N.set(d,{id:L++,color:l})}}h.startMaterialsVector(E,N.size);const V=[],z=Array.from(N.keys());for(let i=0;i<z.length;i++){const P=z[z.length-1-i],{color:d}=N.get(P),[l,m,y,H]=d;V.push(e++),NI.createMaterial(E,l,m,y,H,cC.ONE,0)}const u=E.endVector();let x=0;for(const i of t)x+=i.element.geometries.length;h.startSamplesVector(E,x);const $=[];for(let i=0;i<t.length;i++){const P=t[t.length-1-i],d=n.get(P.element.id),l=P.element.geometries;for(let m=0;m<l.length;m++){const y=l[l.length-m-1],H=r.get(y.id),Q=N.get(y.color.toString()).id,sE=y.localTransformID||0;$.push(e++),OI.createSample(E,d,Q,H,sE)}}const j=E.endVector();h.startLocalTransformsVector(E,A.length);const EE=[];for(let i=0;i<A.length;i++){const P=A[A.length-1-i],[d,l,m,y,H,Q,sE,iE,AE]=P.data;EE.push(e++),pE.createTransform(E,d,l,m,y,H,Q,sE,iE,AE)}const tE=E.endVector(),aE=h.createMeshesItemsVector(E,a),J=h.createRepresentationIdsVector(E,p),CE=h.createSampleIdsVector(E,$),FE=h.createMaterialIdsVector(E,V),K=h.createLocalTransformIdsVector(E,EE),D=h.createGlobalTransformIdsVector(E,o),oE=pE.createTransform(E,T.px,T.py,T.pz,T.dxx,T.dxy,T.dxz,T.dyx,T.dyy,T.dyz);return h.startMeshes(E),h.addCoordinates(E,oE),h.addGlobalTransforms(E,X),h.addShells(E,b),h.addRepresentations(E,U),h.addSamples(E,j),h.addLocalTransforms(E,tE),h.addMaterials(E,u),h.addCircleExtrusions(E,W),h.addMeshesItems(E,aE),h.addRepresentationIds(E,J),h.addSampleIds(E,CE),h.addMaterialIds(E,FE),h.addLocalTransformIds(E,K),h.addGlobalTransformIds(E,D),{modelMesh:h.endMeshes(E),localIDs:s,maxLocalID:e,alignments:F}}}const mE={base:new Set([yE,XE,KE,VE]),materials:new Set([IC,eC,tC,CC,sC,TC,RC,FC,oC,iC]),properties:new Set([Xt,Kt,Qt,$t,jt,Jt,qt,kt,Zt,EC]),elements:new Set([yE,XE,KE,VE,aI,GE,SI,cI,LI,lI,PI,UI,MI,DI,dI,hI,uI,fI,mI,GI,gI,pI,YI,VI,yI,bI,BI,xI,HI,_I,wI,WI,zI,vI,XI,KI,QI,$I,jI,qE,JI,qI,kI,ZI,Ee,Ie,ee,te,Ce,se,Te,Re,Fe,oe,ie,Ae,re,ne,Ne,Oe,ae,Se,ce,Le,le,Pe,Ue,Me,De,de,he,ue,fe,me,Ge,ge,pe,Ye,Ve,ye,be,Be,xe,He,_e,we,We,ze,ve,Xe,Ke,Qe,$e,je,Je,qe,ke,Ze,Et,It,et,tt,Ct,st,Tt,Rt,Ft,ot,it,At,rt,nt,Nt,Ot,at,St,ct,Lt,lt,Pt,Ut,Mt,Dt,dt,ht,ut,ft,mt,Gt,gt,pt,Yt,Vt,yt,bt,Bt,xt,Ht,JE,jE,_t,wt,Wt,zt,vt])};class uC{constructor(){O(this,"_builder",null);O(this,"wasm",{path:"/node_modules/web-ifc/",absolute:!1});O(this,"webIfcSettings",{COORDINATE_TO_ORIGIN:!0});O(this,"attributesToExclude",new Set(["Representation","ObjectPlacement","CompositionType","OwnerHistory"]));O(this,"geometryProcessSettings",{threshold:3e3,precision:1e6,normalPrecision:1e7,planePrecision:1e3});O(this,"relations",new Map([[AC,{forRelating:"DefinesOcurrence",forRelated:"IsDefinedBy"}],[rC,{forRelated:"HasAssociations",forRelating:"AssociatedTo"}],[nC,{forRelated:"Decomposes",forRelating:"IsDecomposedBy"}],[NC,{forRelated:"ContainedInStructure",forRelating:"ContainsElements"}]]));O(this,"classes",{elements:new QE([...mE.elements]),abstract:new QE([...mE.base,...mE.materials,...mE.properties])});O(this,"includeUniqueAttributes",!1);O(this,"includeRelationNames",!1);O(this,"replaceStoreyElevation",!0);O(this,"distanceThreshold",1e5)}get builder(){if(!this._builder)throw new Error("Fragments: Builder not initialized");return this._builder}async process(I){var L;this._builder=new OC(1024);const E=new UC(this);E.wasm=this.wasm,E.webIfcSettings=this.webIfcSettings;const e={...I,builder:this.builder},s=await E.process(e),{modelMesh:T,maxLocalID:C,localIDs:F,alignments:t}=s,A=new LC(this,this.builder);A.wasm=this.wasm,A.webIfcSettings=this.webIfcSettings;const n={...I,geometryProcessedLocalIDs:F,alignments:t,maxLocalID:C},r=await A.process(n),{relIndicesVector:N,relsVector:R,guidsVector:a,guidsItemsVector:c,metadataOffset:o,localIdsVector:S,spatialStrutureOffset:M,attributesVector:X,categoriesVector:w,uniqueAttributesVector:b,relNamesVector:B,newMaxLocalID:W}=r,p=I.id??aC.generateUUID(),f=this.builder.createString(p);g.startModel(this.builder),g.addMeshes(this.builder,T),g.addMetadata(this.builder,o),g.addAttributes(this.builder,X),g.addUniqueAttributes(this.builder,b),g.addRelationNames(this.builder,B),g.addLocalIds(this.builder,S),g.addCategories(this.builder,w),g.addRelationsItems(this.builder,N),g.addRelations(this.builder,R),g.addGuidsItems(this.builder,c),g.addGuids(this.builder,a),g.addSpatialStructure(this.builder,M),g.addGuid(this.builder,f),g.addMaxLocalId(this.builder,W);const G=g.endModel(this.builder);this.builder.finish(G);const v=this.builder.asUint8Array();this.clean();const U=I.raw?v:SC.deflate(v);return(L=I.progressCallback)==null||L.call(I,1,{process:"conversion",state:"finish"}),U}clean(){var I;(I=this._builder)==null||I.clear(),this._builder=null}}export{uC as I};
