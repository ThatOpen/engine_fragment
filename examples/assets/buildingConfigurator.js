import{C as je,W as Ne,cu as ze,cv as Re,cw as Ue,cx as Ve,cy as Ye,dB as Xe,d0 as qe,V as c,cD as Qe,I as Ze,cI as Me,cL as x,cF as h,cB as Je,cM as Ke,j as pe,O as et}from"./virtual-memory-controller-ZSRKHGNY.js";import{x as tt,r as X,t as ot}from"./index-BR-jkuKE.js";import{a as nt,R as ve,m as q}from"./index-CWj6LyOo.js";import{S as rt}from"./stats.min-Cj8wREqt.js";import{G as it,P as at}from"./index-BzdGIFlS.js";const st=document.getElementById("container"),C=new je,lt=C.get(Ne),o=lt.create();o.scene=new ze(C);o.renderer=new tt(C,st);o.camera=new Re(C);o.renderer.postproduction.enabled=!0;o.renderer.postproduction.style=X.COLOR_PEN;C.init();o.camera.controls.setLookAt(12,6,8,0,0,-10);o.renderer.three.shadowMap.enabled=!0;o.renderer.three.shadowMap.type=Ue;o.scene.setup({shadows:{cascade:1,resolution:1024}});const ct=o.scene.three.background;await o.scene.updateShadows();o.camera.controls.addEventListener("rest",async()=>{await o.scene.updateShadows()});const dt=new Ve(1);o.scene.three.add(dt);const e={width:20,length:30,columnLengthDistance:5,columnWidthDistance:5,floorHeight:4,exteriorColumnWidth:.5,exteriorColumnLength:.5,interiorColumnWidth:.25,interiorColumnLength:.25,floorThickness:.3,numberOfFloors:10,clipPlaneHeight:1.5,windowHeight:2,windowWidth:1},mt="../../src/multithreading/fragments-thread.ts",s=C.get(Ye);s.init(mt);s.settings.graphicsQuality=1;o.camera.controls.addEventListener("control",()=>{s.core.update()});s.core.models.list.onItemSet.add(({value:i})=>{i.tiles.onItemSet.add(({value:r})=>{"isMesh"in r&&r.material[0].opacity===1&&(r.castShadow=!0,r.receiveShadow=!0)}),i.getClippingPlanesEvent=()=>Array.from(o.renderer.three.clippingPlanes)||[]});const Ie=C.get(Xe),I=C.get(ot);I.world=o;const We=new qe({color:2236962,side:2});o.renderer.postproduction.excludedObjectsEnabled=!0;o.renderer.postproduction.excludedObjectsPass.addExcludedMaterial(We);I.styles.set("BlackFill",{fillsMaterial:We});const He=Ie.createFromNormalAndCoplanarPoint(o,new c(0,-1,0),new c(0,e.clipPlaneHeight,0)),F=Ie.list.get(He);F.visible=!1;let O=null;const ut=()=>{const i=[...I.list.keys()];for(const r of i)I.list.delete(r);I.list.clear(),O=I.createFromClipping(He,{items:{All:{style:"BlackFill"}}})};let B=null;const pt=1e3,ht=()=>{F.setFromNormalAndCoplanarPoint(new c(0,-1,0),new c(0,e.clipPlaneHeight,0)),F.update(),B&&clearTimeout(B),B=setTimeout(()=>{if(F.onDraggingEnded.trigger(),O){O.three.frustumCulled=!1;for(const i of O.three.children)i.frustumCulled=!1}},pt)},gt=Qe.newModel({raw:!0}),m=await s.core.load(gt,{modelId:"example",camera:o.camera.three,raw:!0});o.scene.three.add(m.object);await s.core.update(!0);const Z=new Ze;Z.SetWasmPath("/node_modules/web-ifc/",!1);await Z.Init();const d=new it(Z),ke=new Me({color:"white",side:2}),y=new x(new h,ke);o.scene.three.add(y);y.receiveShadow=!0;y.frustumCulled=!1;const W=new h,he=new h,ge=new h,fe=new h,we=new h,be=new h,Se=new h,j=new h,Le=new h,ye=new h,xe=new h;let Q=!1;const Ce=new x(Se),N=new x(W),z=new x(W),R=new x(W),U=new x(W),V=new x(Le),Ee=async()=>{const i=[];await s.core.editor.reset(m.modelId);const r=10,k=e.width+r*2,J=e.length+r*2;d.getExtrusion(y.geometry,{profilePoints:[0,0,0,0,0,J,k,0,J,k,0,0,0,0,0],direction:[0,1,0],cap:!0,length:e.floorThickness}),y.position.y=-.3,y.position.x=-10,y.position.z=-10,y.geometry.computeBoundingBox();const u=s.core.editor.createMaterial(m.modelId,new Me({color:new Ke(1,1,1),side:Je})),p=s.core.editor.createLocalTransform(m.modelId,new pe().identity()),K=e.width,ee=e.length,f=[new c(0,0,0),new c(e.width,0,0),new c(e.width,0,e.length),new c(0,0,e.length),new c(0,0,0)],te=e.width-e.exteriorColumnWidth,oe=e.length-e.exteriorColumnLength,S=[new c(0,0,0),new c(te,0,0),new c(te,0,oe),new c(0,0,oe)],ne=e.exteriorColumnLength,$=e.exteriorColumnWidth;d.getExtrusion(W,{profilePoints:[0,0,0,0,0,ne,$,0,ne,$,0,0],direction:[0,1,0],cap:!0,length:e.floorHeight});const Fe=s.core.editor.createShell(m.modelId,W),re=e.exteriorColumnLength*2,D=1-$;d.getExtrusion(ge,{profilePoints:[0,0,0,0,0,re,D,0,re,D,0,0,0,0,0],direction:[0,1,0],length:e.floorHeight});const ie=s.core.editor.createShell(m.modelId,ge),Oe=d.getProfilePoints({type:at.H,width:e.interiorColumnWidth,depth:e.interiorColumnLength,thickness:.03,flangeThickness:.02}),Ge=d.transformPoints(Oe,new pe().makeRotationX(Math.PI/2));d.getExtrusion(he,{profilePoints:Ge,direction:[0,1,0],length:e.floorHeight-e.floorThickness});const $e=s.core.editor.createShell(m.modelId,he),T=3,L=5;d.getExtrusion(Le,{profilePoints:[0,0,0,0,0,L,T,0,L,T,0,0],direction:[0,1,0],length:1}),V.position.set(0,-.5,0);const E=.2;d.getWall(ye,{start:[T,0,e.windowWidth],end:[T,e.floorHeight-e.floorThickness,L+E/2],direction:[0,1,0],elevation:0,offset:0,thickness:E,cuttingPlaneNormal:[0,0,0],cuttingPlanePosition:[0,0,0],height:e.floorHeight-e.floorThickness});const De=s.core.editor.createShell(m.modelId,ye);d.getWall(xe,{start:[0,0,L],end:[T-E/2,0,L],direction:[0,1,0],elevation:0,offset:0,thickness:E,cuttingPlaneNormal:[0,0,0],cuttingPlanePosition:[0,0,0],height:e.floorHeight-e.floorThickness});const _e=s.core.editor.createShell(m.modelId,xe);d.getExtrusion(Se,{profilePoints:[0,0,0,0,0,ee,K,0,ee,K,0,0],direction:[0,1,0],cap:!0,length:e.floorThickness}),N.position.copy(S[0]),z.position.copy(S[1]),R.position.copy(S[2]),U.position.copy(S[3]),Ce.updateMatrixWorld(!0),N.updateMatrixWorld(!0),z.updateMatrixWorld(!0),R.updateMatrixWorld(!0),U.updateMatrixWorld(!0),V.updateMatrixWorld(!0),d.getBooleanOperation(j,{target:Ce,operands:[N,z,R,U,V],type:"DIFFERENCE"});const ae=new x(j,ke);o.scene.three.add(ae),ae.position.y+=10;const Ae=s.core.editor.createShell(m.modelId,j);d.getSweep(fe,{profilePoints:[0,0,0,.1,0,0,.1,.1,0,0,.1,0,0,0,0],curvePoints:[0,0,0,0,e.windowHeight,0,e.windowWidth,e.windowHeight,0,e.windowWidth,0,0,0,0,0]});const se=s.core.editor.createShell(m.modelId,fe),le=e.floorHeight-e.windowHeight;d.getExtrusion(we,{profilePoints:[0,0,0,0,le,0,e.windowWidth,le,0,e.windowWidth,0,0],direction:[0,0,1],cap:!0,length:e.floorThickness});const ce=s.core.editor.createShell(m.modelId,we),de=.15,me=.2;d.getSweep(be,{profilePoints:[0,0,0,1,0,0,1,de,0,0,de,0,0,0,0],curvePoints:[0,0,0,0,0,me,0,e.windowHeight,me,0,e.windowHeight,0]});const Be=s.core.editor.createShell(m.modelId,be),t=new et;for(const n of S)for(let a=0;a<e.numberOfFloors;a++)t.position.copy(n),t.position.y=a*e.floorHeight,t.updateMatrix(),i.push({attributes:{_category:{value:"test"}},globalTransform:t.matrix.clone(),samples:[{localTransform:p,representation:Fe,material:u}]});const ue=[],_=Math.floor(e.length/e.columnLengthDistance),A=Math.floor(e.width/e.columnWidthDistance);for(let n=0;n<=_;n++){const a=n*e.columnLengthDistance;for(let l=0;l<=A;l++){if(n===0&&l===0||n===0&&l===A||n===_&&l===0||n===_&&l===A)continue;const M=l*e.columnWidthDistance;ue.push(new c(M,0,a))}}for(const n of ue)for(let a=0;a<e.numberOfFloors;a++)t.position.copy(n),t.position.y=a*e.floorHeight,t.updateMatrix(),i.push({attributes:{_category:{value:"test"}},globalTransform:t.matrix.clone(),samples:[{localTransform:p,representation:$e,material:u}]});for(let n=0;n<e.numberOfFloors;n++){const a=(n+1)*e.floorHeight-e.floorThickness;t.position.set(0,a,0),t.updateMatrix(),i.push({attributes:{_category:{value:"test"}},globalTransform:t.matrix.clone(),samples:[{localTransform:p,representation:Ae,material:u}]})}for(let n=0;n<e.numberOfFloors;n++)t.position.set(0,n*e.floorHeight,0),t.rotation.set(0,0,0),t.updateMatrix(),i.push({attributes:{_category:{value:"test"}},globalTransform:t.matrix.clone(),samples:[{localTransform:p,representation:De,material:u}]}),i.push({attributes:{_category:{value:"test"}},globalTransform:t.matrix.clone(),samples:[{localTransform:p,representation:_e,material:u}]}),t.position.set(T,n*e.floorHeight,e.windowWidth),t.rotation.y=Math.PI/2,t.updateMatrix(),i.push({attributes:{_category:{value:"test"}},globalTransform:t.matrix.clone(),samples:[{localTransform:p,representation:se,material:u}]}),t.position.y+=e.windowHeight,t.position.x-=.1,t.updateMatrix(),i.push({attributes:{_category:{value:"test"}},globalTransform:t.matrix.clone(),samples:[{localTransform:p,representation:ce,material:u}]});for(let n=0;n<e.numberOfFloors;n++)for(let a=0;a<f.length-1;a++){const l=f[a],g=f[a+1],b=g.clone().sub(l).normalize(),w=l.distanceTo(g),P=new c;P.crossVectors(b,new c(0,1,0)),t.position.copy(l),t.lookAt(g),t.rotateY(-Math.PI/2),t.position.add(b.clone().multiplyScalar(e.exteriorColumnLength)),t.position.add(P.clone().multiplyScalar(-.5/2)),t.position.y=n*e.floorHeight,t.updateMatrix(),i.push({attributes:{_category:{value:"test"}},globalTransform:t.matrix.clone(),samples:[{localTransform:p,representation:ie,material:u}]});const M=w-2+D;t.position.add(b.clone().multiplyScalar(M)),t.updateMatrix(),i.push({attributes:{_category:{value:"test"}},globalTransform:t.matrix.clone(),samples:[{localTransform:p,representation:ie,material:u}]})}for(let n=0;n<e.numberOfFloors;n++)for(let a=0;a<f.length-1;a++){const l=f[a],g=f[a+1],b=l.distanceTo(g),w=g.clone().sub(l).normalize();for(let P=1;P<b-1;P++){t.position.copy(l),t.lookAt(g),t.rotateY(-Math.PI/2),t.position.add(w.clone().multiplyScalar(P)),t.position.y=n*e.floorHeight,t.updateMatrix();const M=new c;M.crossVectors(w,new c(0,1,0)),i.push({attributes:{_category:{value:"test"}},globalTransform:t.matrix.clone(),samples:[{localTransform:p,representation:se,material:u}]}),t.position.y+=e.windowHeight,t.position.add(M.clone().multiplyScalar(-.3)),t.updateMatrix(),i.push({attributes:{_category:{value:"test"}},globalTransform:t.matrix.clone(),samples:[{localTransform:p,representation:ce,material:u}]})}}for(let n=0;n<f.length-1;n++){const a=f[n],l=f[n+1],g=a.distanceTo(l),b=l.clone().sub(a).normalize();for(let w=0;w<g;w++)t.position.copy(a),t.lookAt(l),t.rotateY(Math.PI/2),t.position.add(b.clone().multiplyScalar(w)),t.position.y=e.floorHeight*e.numberOfFloors,t.updateMatrix(),i.push({attributes:{_category:{value:"test"}},globalTransform:t.matrix.clone(),samples:[{localTransform:p,representation:Be,material:u}]})}await s.core.editor.createElements(m.modelId,i),ut(),await s.core.update(!0),Q=!1};await Ee();let Y=null;const ft=1e3,v=async()=>{Q||(Q=!0,Y&&clearTimeout(Y),Y=setTimeout(()=>{Ee()},ft))},wt=[[0,"Model"],[1,"Plan"]],Pe=i=>{for(const[,r]of s.core.models.list)r.useCamera(i);o.renderer.postproduction.updateCamera()};let Te=0;const bt=async i=>{Te=i,Te===0?(o.camera.controls.setLookAt(5,5,5,0,0,0),await o.camera.projection.set("Perspective"),await o.camera.set("Orbit"),o.scene.three.background=ct,o.renderer.postproduction.style=X.COLOR_PEN,o.scene.shadowsEnabled=!0,Pe(o.camera.three)):(o.camera.controls.setLookAt(5,5,5,5,0,5),await o.camera.projection.set("Orthographic"),await o.camera.set("Plan"),o.renderer.postproduction.style=X.PEN,o.scene.three.background=null,o.scene.shadowsEnabled=!1,Pe(o.camera.three))};nt.init();const[G]=ve.create(i=>q`
    <bim-panel style="min-width: 25rem;" id="controls-panel" active label="Element Editor" class="options-menu">

      <bim-panel-section label="Controls">

      <bim-dropdown label="View mode" @change=${r=>{bt(r.target.value[0])}}>
        ${wt.map(([r,k])=>q`<bim-option label=${k} ?checked=${r===0} value=${r}></bim-option>`)}
      </bim-dropdown>

      <bim-number-input label="Width" slider min=20 max=50 step=1 value=${e.width} @change=${r=>{e.width=r.target.value,v()}}></bim-number-input>

      <bim-number-input label="Length" slider min=20 max=50 step=1 value=${e.length} @change=${r=>{e.length=r.target.value,v()}}></bim-number-input>

      <bim-number-input label="Floor Height" slider min=3 max=5 step=0.1 value=${e.floorHeight} @change=${r=>{e.floorHeight=r.target.value,v()}}></bim-number-input>

      <bim-number-input label="Number of floors" slider min=2 max=40 step=1 value=${e.numberOfFloors} @change=${r=>{e.numberOfFloors=r.target.value,v()}}></bim-number-input>

      <bim-number-input label="Column Length Distance" slider min=5 max=10 step=1 value=${e.columnLengthDistance} @change=${r=>{e.columnLengthDistance=r.target.value,v()}}></bim-number-input>
      
      <bim-number-input label="Column Width Distance" slider min=5 max=10 step=1 value=${e.columnWidthDistance} @change=${r=>{e.columnWidthDistance=r.target.value,v()}}></bim-number-input>

      <bim-number-input label="Clip Plane Height" slider min=0 max=100 step=0.1 value=${e.clipPlaneHeight} @change=${r=>{e.clipPlaneHeight=r.target.value,ht()}}></bim-number-input>

      </bim-panel-section>

    </bim-panel>
  `,{});document.body.append(G);const yt=ve.create(()=>q`
    <bim-button class="phone-menu-toggler" icon="solar:settings-bold"
      @click=${()=>{G.classList.contains("options-menu-visible")?G.classList.remove("options-menu-visible"):G.classList.add("options-menu-visible")}}>
    </bim-button>
  `);document.body.append(yt);const H=new rt;H.showPanel(2);document.body.append(H.dom);H.dom.style.left="0px";H.dom.style.zIndex="unset";o.renderer.onBeforeUpdate.add(()=>H.begin());o.renderer.onAfterUpdate.add(()=>H.end());
