import{C as h,W as S,cu as L,a as M,cv as R,cx as k,cw as C,s as _,cS as c,o as D}from"./virtual-memory-controller-ZSRKHGNY.js";import{S as x}from"./stats.min-Cj8wREqt.js";import{a as P,R as g,m as T}from"./index-CWj6LyOo.js";import{F as U}from"./index-CqDgYQyW.js";const E=new h,v=E.get(S),O=document.getElementById("container"),u=v.create();u.scene=new L(E);u.renderer=new M(E,O);u.camera=new R(E);E.init();u.scene.three.add(new k);u.camera.three.far=1e4;u.renderer.three.shadowMap.enabled=!0;u.renderer.three.shadowMap.type=C;u.scene.setup({shadows:{cascade:1,resolution:1024}});await u.scene.updateShadows();u.camera.controls.addEventListener("rest",async()=>{await u.scene.updateShadows()});const I=[0,0,0,1,1,1],A={points:[[0,0,0],[1,0,0],[1,1,0],[0,1,0],[.25,.25,0],[.75,.25,0],[.75,.75,0],[.25,.75,0]],profiles:new Map([[0,[0,1,2,3]]]),holes:new Map([[0,[[4,5,6,7]]]]),bigProfiles:new Map,bigHoles:new Map,type:_.NONE,profilesFaceIds:[0]},q="../../src/multithreading/fragments-thread.ts",s=new U(q);u.camera.controls.addEventListener("update",()=>s.update());s.models.list.onItemSet.add(({value:t})=>{t.useCamera(u.camera.three),u.scene.three.add(t.object),t.tiles.onItemSet.add(({value:e})=>{"isMesh"in e&&e.material[0].opacity===1&&(e.castShadow=!0,e.receiveShadow=!0)})});const m="test",$=await fetch("/resources/frags/school_arq.frag"),N=await $.arrayBuffer(),i=await s.load(N,{modelId:m});await s.update(!0);const G=async()=>{const t=[],e=await i.getSamples(),a=new Map;for(const[,p]of e){const l=p.material,w=a.get(l)||0;a.set(l,w+1)}let o=0,n=0;for(const[p,l]of a)l>n&&(n=l,o=p);const r=await i.getMaterials([o]),d=r.keys().next().value,b=r.get(d);b.r=255,b.g=0,b.b=0,t.push({type:c.UPDATE_MATERIAL,localId:d,data:b}),await s.editor.edit(m,t),await s.update(!0)},B=async()=>{const t=[],e=await i.getRepresentations();for(const[a,o]of e)o.geometry=A,o.bbox=I,t.push({type:c.UPDATE_REPRESENTATION,localId:a,data:o});await s.editor.edit(m,t),await s.update(!0)},F=async()=>{const t=[],e=await i.getSamples(),a=e.values().next().value;for(const[o,n]of e)n.material=a.material,t.push({type:c.UPDATE_SAMPLE,localId:o,data:n});await s.editor.edit(m,t),await s.update(!0)},j=async()=>{const t=[],e=await i.getGlobalTransforms();for(const[a,o]of e)o.position[1]*=5,t.push({type:c.UPDATE_GLOBAL_TRANSFORM,localId:a,data:o});await s.editor.edit(m,t),await s.update(!0)},W=async()=>{const t=[],e=await i.getLocalTransforms();let a=!0;for(const[o,n]of e){if(a){a=!1;continue}n.position[1]*=5,t.push({type:c.UPDATE_LOCAL_TRANSFORM,localId:o,data:n})}await s.editor.edit(m,t),await s.update(!0)},H=async()=>{const t=[],e=await i.getItemsOfCategories([/WALL/]),a=Object.values(e).flat(),o=await i.getItems(a);for(const[r,d]of o)d.data={test:{value:"hello"}},t.push({type:c.UPDATE_ITEM,localId:r,data:d});await s.editor.edit(m,t),await s.update(!0);const n=await i.getItems(a);console.log("New items:",n),alert("All wall attributes edited! Check the console to see them!")},z=async()=>{const t=[],e=await i.getMetadata();e.newMetadataAttribute="newMetadataAttribute",t.push({type:c.UPDATE_METADATA,localId:0,data:e}),await s.editor.edit(m,t),await s.update(!0);const a=await i.getMetadata();console.log("New metadata:",a),alert("Metadata edited! Check the console to see it!")},J=async()=>{const t=[];t.push({type:c.UPDATE_SPATIAL_STRUCTURE,localId:0,data:{localId:0,category:"test",children:[]}}),await s.editor.edit(m,t),await s.update(!0);const e=await i.getSpatialStructure();console.log("New empty spatial structure:",e),alert("Spatial structure edited! Check the console to see it!")},K=async()=>{const t=[],e={r:113,g:255,b:0,a:255,renderedFaces:0,stroke:0},a="new-material";t.push({type:c.CREATE_MATERIAL,tempId:a,data:e});const o=await i.getSamples();for(const[n,r]of o)t.push({type:c.UPDATE_SAMPLE,localId:n,data:{...r,material:a}});await s.editor.edit(m,t),await s.update(!0)},Q=async()=>{const t=[],e="new-geometry";t.push({type:c.CREATE_REPRESENTATION,tempId:e,data:{bbox:I,representationClass:D.SHELL,geometry:A}});const a=await i.getSamples();for(const[o,n]of a)t.push({type:c.UPDATE_SAMPLE,localId:o,data:{...n,representation:e}});await s.editor.edit(m,t),await s.update(!0)},V=async()=>{const t=[],e=await i.getSamples(),a=e.values().next().value;for(const[,o]of e)t.push({type:c.CREATE_SAMPLE,data:{...o,representation:a.representation}});await s.editor.edit(m,t),await s.update(!0)},X=async()=>{const t=[],e="new-item",a="new-global-transform";t.push({type:c.CREATE_ITEM,tempId:e,data:{data:{hello:{value:"world"}},category:"test"}},{type:c.CREATE_GLOBAL_TRANSFORM,tempId:a,data:{position:[0,0,0],xDirection:[1,0,0],yDirection:[0,1,0],itemId:e}});const o=await i.getSamples();for(const[n,r]of o)t.push({type:c.UPDATE_SAMPLE,localId:n,data:{...r,item:a}});await s.editor.edit(m,t),await s.update(!0)},Y=async()=>{const t=[],e="new-local-transform";t.push({type:c.CREATE_LOCAL_TRANSFORM,tempId:e,data:{position:[0,0,0],xDirection:[1,0,0],yDirection:[0,1,0]}});const a=await i.getSamples();for(const[o,n]of a)t.push({type:c.UPDATE_SAMPLE,localId:o,data:{...n,localTransform:e}});await s.editor.edit(m,t),await s.update(!0)},Z=async()=>{const t=[];t.push({type:c.CREATE_ITEM,data:{data:{hello:{value:"world"}},category:"test"}});const[e]=await s.editor.edit(m,t);await s.update(!0);const a=await i.getItems([e]);console.log("New items:",a),alert("Item created! Check the console to see it!")},tt=async()=>{const t=[],e=await i.getSamples(),a=new Map;for(const[,p]of e){const l=p.material,w=a.get(l)||0;a.set(l,w+1)}let o=0,n=0;for(const[p,l]of a)l>n&&(n=l,o=p);const r=await i.getMaterials(),d=Array.from(r.keys()),b=d[0]===o?d[1]:d[0];t.push({type:c.DELETE_MATERIAL,localId:o});for(const[p,l]of e)l.material===o&&t.push({type:c.UPDATE_SAMPLE,localId:p,data:{...l,material:b}});await s.editor.edit(m,t),await s.update(!0)},et=async()=>{const t=[],e=await i.getSamples(),a=new Map;for(const[,p]of e){const l=p.representation,w=a.get(l)||0;a.set(l,w+1)}let o=0,n=0;for(const[p,l]of a)l>n&&(n=l,o=p);const r=await i.getRepresentations(),d=Array.from(r.keys()),b=d[0]===o?d[1]:d[0];t.push({type:c.DELETE_REPRESENTATION,localId:o});for(const[p,l]of e)l.representation===o&&t.push({type:c.UPDATE_SAMPLE,localId:p,data:{...l,representation:b}});await s.editor.edit(m,t),await s.update(!0)},at=async()=>{const t=[],e=await i.getSamples();let a=!1;for(const[o]of e)a=!a,!a&&t.push({type:c.DELETE_SAMPLE,localId:o});await s.editor.edit(m,t),await s.update(!0)},ot=async()=>{const t=[],e=Array.from((await i.getGlobalTransforms()).keys()),a=new Set;for(let r=1;r<e.length;r++)a.add(e[r]);const o=e[0];for(const r of a)t.push({type:c.DELETE_GLOBAL_TRANSFORM,localId:r});const n=await i.getSamples();for(const[r,d]of n)a.has(d.item)&&t.push({type:c.UPDATE_SAMPLE,localId:r,data:{...d,item:o}});await s.editor.edit(m,t),await s.update(!0)},st=async()=>{const t=[],e=Array.from((await i.getLocalTransforms()).keys()),a=new Set;for(let r=1;r<e.length;r++)a.add(e[r]);const o=e[0];for(const r of a)t.push({type:c.DELETE_LOCAL_TRANSFORM,localId:r});const n=await i.getSamples();for(const[r,d]of n)a.has(d.localTransform)&&t.push({type:c.UPDATE_SAMPLE,localId:r,data:{...d,localTransform:o}});await s.editor.edit(m,t),await s.update(!0)},nt=async()=>{const t=[],e=await i.getItems(),a=Array.from(e.keys()),o=a[0],n=a[1],r=await i.getGlobalTranformsIdsOfItems([o]);t.push({type:c.DELETE_ITEM,localId:o});const d=await i.getGlobalTransforms(r);for(const[b,p]of d)t.push({type:c.UPDATE_GLOBAL_TRANSFORM,localId:b,data:{...p,itemId:n}});await s.editor.edit(m,t),await s.update(!0)},it=async()=>{await s.editor.save(i.modelId),window.setTimeout(async()=>{const t=await i.getBuffer(),e=new Uint8Array(t),a=new Blob([e]),o=URL.createObjectURL(a),n=document.createElement("a");n.href=o,n.download="exported.frag",document.body.appendChild(n),n.click(),document.body.removeChild(n),URL.revokeObjectURL(o)},1e3)};P.init();const y=g.create(()=>T`
    <bim-panel id="controls-panel" active label="Raycasting" class="options-menu">
      <bim-panel-section fixed label="Export operations">
        <bim-button icon="mdi:file-export" label="Export model" @click=${it}></bim-button>
      </bim-panel-section>
      <bim-panel-section fixed label="Edit operations">
        <bim-button icon="icon-park-outline:material" label="Edit materials" @click=${G}></bim-button>
        <bim-button icon="mdi:cube-outline" label="Edit geometries" @click=${B}></bim-button>
        <bim-button icon="mingcute:cube-line" label="Edit instances" @click=${F}></bim-button>
        <bim-button icon="iconoir:axes" label="Edit global transforms" @click=${j}></bim-button>
        <bim-button icon="iconoir:axes" label="Edit local transforms" @click=${W}></bim-button>
        <bim-button icon="mdi:paper-outline" label="Edit items" @click=${H}></bim-button>
        <bim-button icon="bx:data" label="Edit metadata" @click=${z}></bim-button>
        <bim-button icon="mdi:tree-outline" label="Edit spatial structure" @click=${J}></bim-button>
      </bim-panel-section>
      <bim-panel-section fixed label="Create operations">
        <bim-button icon="icon-park-outline:material" label="Create materials" @click=${K}></bim-button>
        <bim-button icon="mdi:cube-outline" label="Create geometries" @click=${Q}></bim-button>
        <bim-button icon="mingcute:cube-line" label="Create instances" @click=${V}></bim-button>
        <bim-button icon="iconoir:axes" label="Create global transforms" @click=${X}></bim-button>
        <bim-button icon="iconoir:axes" label="Create local transforms" @click=${Y}></bim-button>
        <bim-button icon="mdi:paper-outline" label="Create items" @click=${Z}></bim-button>
      </bim-panel-section>
      <bim-panel-section fixed label="Delete operations">
        <bim-button icon="icon-park-outline:material" label="Delete materials" @click=${tt}></bim-button>
        <bim-button icon="mdi:cube-outline" label="Delete geometries" @click=${et}></bim-button>
        <bim-button icon="mingcute:cube-line" label="Delete instances" @click=${at}></bim-button>
        <bim-button icon="iconoir:axes" label="Delete global transforms" @click=${ot}></bim-button>
        <bim-button icon="iconoir:axes" label="Delete local transforms" @click=${st}></bim-button>
        <bim-button icon="mdi:paper-outline" label="Delete items" @click=${nt}></bim-button>
      </bim-panel-section>

    </bim-panel>
  `);document.body.append(y);const rt=g.create(()=>T`
    <bim-button class="phone-menu-toggler" icon="solar:settings-bold"
      @click=${()=>{y.classList.contains("options-menu-visible")?y.classList.remove("options-menu-visible"):y.classList.add("options-menu-visible")}}>
    </bim-button>
  `);document.body.append(rt);const f=new x;f.showPanel(2);document.body.append(f.dom);f.dom.style.left="0px";f.dom.style.zIndex="unset";u.renderer.onBeforeUpdate.add(()=>f.begin());u.renderer.onAfterUpdate.add(()=>f.end());
