// MESHES

enum RenderedFaces:byte {
    ONE = 0, // One rendered face
    TWO = 1 // Two rendered faces
}

enum Stroke:byte {
    DEFAULT = 0 // Default line type
}

enum AxisPartClass:byte {
    NONE = 0, // No axis part class
    WIRE = 1, // Straight line axis part class
    WIRE_SET = 2, // Straight line set axis part class
    CIRCLE_CURVE = 3 // Circular arc axis part class
}

enum RepresentationClass:byte {
    NONE = 0, // No representation class
    SHELL = 1, // Shell (brep) representation class
    CIRCLE_EXTRUSION = 2, // Circle extrusion representation class (used for reinforcement bars)
}

enum ShellType:byte {
    NONE = 0, // Default shell type (less than 65535 points)
    BIG = 1, // Big shell type (less than 4294967295 points)
}

struct FloatVector {
    x: float; // x coordinate, max value 10^30
    y: float; // y coordinate, max value 10^30
    z: float; // z coordinate, max value 10^30
}

struct DoubleVector {
    x: double; // x coordinate, max value 10^308
    y: double; // y coordinate, max value 10^308
    z: double; // z coordinate, max value 10^308
}

struct Transform {
    position: DoubleVector; // Position of the transform
    x_direction: FloatVector; // X axis of the transform
    y_direction: FloatVector; // Y axis of the transform
}

struct Material {
    r: ubyte; // Red color value
    g: ubyte; // Green color value
    b: ubyte; // Blue color value
    a: ubyte; // Alpha color value
    rendered_faces: RenderedFaces; // Number of rendered faces
    stroke: Stroke; // Line stroke type
}

struct BoundingBox {
    min: FloatVector; // Minimum point of the bounding box
    max: FloatVector; // Maximum point of the bounding box
}

struct Wire {
    p1: FloatVector; // First point of the wire
    p2: FloatVector; // Last point of the wire
}

table WireSet {
    ps: [FloatVector]; // Ordered points of the wire set
}

struct CircleCurve {
    aperture: float; // Angle of the arc
    position: FloatVector; // Center of the arc
    radius: float; // Radius of the arc
    x_direction: FloatVector; // X axis of the arc
    y_direction: FloatVector; // Y axis of the arc
}

table ShellHole {
    indices: [ushort] (required); // Indices of the points of the hole
    profile_id: ushort; // Index of the profile to which the hole belongs
}

table ShellProfile {
    indices: [ushort] (required); // Indices of the points of the profile
}

table BigShellHole {
    indices: [uint] (required); // Indices of the points of the hole
    profile_id: ushort; // Index of the profile to which the hole belongs
}

table BigShellProfile {
    indices: [uint] (required); // Indices of the points of the profile
}

table Axis {
    wires: [Wire] (required); // Straight lines of the axis
    order: [uint] (required); // Indices of the axis parts
    parts: [AxisPartClass] (required); // Class of the axis parts
    wire_sets: [WireSet] (required); // Straight line sets of the axis
    circle_curves: [CircleCurve] (required); // Circular arcs of the axis
}

struct Representation {
    id: uint; // The index of the geometry in its corresponding array
    bbox: BoundingBox; // The bounding box of the geometry
    representation_class: RepresentationClass; // The class of the geometry (in which array it belongs: shells, circleExtrusions, etc.)
}

struct Sample {
    item: uint; // The index of the global transform and item in meshesItems
    material: uint; // The index of the material in materials
    representation: uint; // The index of the representation in representations
    local_transform: uint; // The index of the local transform in localTransforms
}

table Shell {
    profiles: [ShellProfile] (required); // Exterior profiles of the shell
    holes: [ShellHole] (required); // Holes of the shell
    points: [FloatVector] (required); // Points of the shell
    big_profiles: [BigShellProfile] (required); // Exterior profiles of the shell (if the shell has more than 65535 points)
    big_holes: [BigShellHole] (required); // Holes of the shell (if the shell has more than 65535 points)
    type: ShellType; // Type of the shell (less than 65535 points or more than 65535 points)
    profiles_face_ids: [ushort] (required); // An array of face ids for the profiles
}

table CircleExtrusion {
    radius: [double] (required); // Half of the thickness of the circle extrusion
    axes: [Axis] (required); // Axes of the circle extrusion
}

table Meshes {
    coordinates: Transform (required); // The global coordinates of the model. Usually used in BIM models to locate the model geographically.
    meshes_items: [uint] (required); // An array that works as an indexation matching localIds indices with meshes.
    samples: [Sample] (required); // An array of all instances of meshes in this model.
    representations: [Representation] (required); // Representations are a common interface for all geometry types. Each representation is an abstraction of a geometry and has its basic information. 
    materials: [Material] (required); // The list of unique geometry materials in this model.
    circle_extrusions: [CircleExtrusion] (required); // The list of geometries defined as a wire with thickness. Used mainly for reinforcement bars.
    shells: [Shell] (required); // The list of geometries defined as faces and holes (breps).
    local_transforms: [Transform] (required); // Local transforms of the samples
    global_transforms: [Transform] (required); // A set of local transformations for geometry samples. Each global transformation is assigned to a local id by meshes_items.
    material_ids: [uint]; // An array of local ids for the materials
    representation_ids: [uint]; // An array of local ids for the representations
    sample_ids: [uint]; // An array of local ids for the samples
    local_transform_ids: [uint]; // An array of local ids for the local transforms
    global_transform_ids: [uint]; // An array of local ids for the global transforms
}

table Attribute {
    data: [string] (required); // The attributes of an item, represented as an array of strings
}

table Relation {
    data: [string] (required); // The relation of an item, represented as an array of strings
}

table SpatialStructure {
    local_id: uint = null; // Local id of the current spatial node
    category: string; // Category of the current spatial node
    children: [SpatialStructure]; // Child spatial nodes of the current spatial node
}

// MODELS

// The main object and the entry point of all Fragment files. Each Fragments file has just one model, and it contains all the information of the file.
table Model {
    metadata: string; // JSON string for generic data about the file

    guids: [string] (required); // An array of Global Unique Identifiers of items. Not all items may have a guid.
    guids_items: [uint] (required); // An array that works as an indexation matching localIds indices with guids.

    max_local_id: uint; // The smallest localID available when serializing. Used to know the next localID when adding a new item.
    local_ids: [uint] (required); // File specific identification for each item.

    categories: [string] (required); // An array of all item categories found in the file, stored as strings.

    meshes: Meshes (required); // The object containing all explicit geometries of the model.

    attributes: [Attribute]; // An array of items data stored as an array of arrays.

    relations: [Relation]; // An array of relations between different items stored as arrays of arrays.
    relations_items: [int]; // An array that works as an indexation matching localIds indices with relations.

    guid: string (required); // An global ID that identifies this model uniquely.

    spatial_structure: SpatialStructure; // A tree representing the spatial relation between elements.

    unique_attributes: [string]; // An array of unique item attributes in this model.
    relation_names: [string]; // An array of unique relation names in this model.
}

file_identifier "0001";

root_type Model;