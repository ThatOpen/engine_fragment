// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { CircleExtrusion } from './circle-extrusion.js';
import { Material } from './material.js';
import { Representation } from './representation.js';
import { Sample } from './sample.js';
import { Shell } from './shell.js';
import { Transform } from './transform.js';


export class Meshes {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Meshes {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMeshes(bb:flatbuffers.ByteBuffer, obj?:Meshes):Meshes {
  return (obj || new Meshes()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMeshes(bb:flatbuffers.ByteBuffer, obj?:Meshes):Meshes {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Meshes()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

coordinates(obj?:Transform):Transform|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Transform()).__init(this.bb_pos + offset, this.bb!) : null;
}

meshesItems(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

meshesItemsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

meshesItemsArray():Uint32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

samples(index: number, obj?:Sample):Sample|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Sample()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;
}

samplesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

representations(index: number, obj?:Representation):Representation|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Representation()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 32, this.bb!) : null;
}

representationsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

materials(index: number, obj?:Material):Material|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new Material()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 6, this.bb!) : null;
}

materialsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

circleExtrusions(index: number, obj?:CircleExtrusion):CircleExtrusion|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new CircleExtrusion()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

circleExtrusionsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

shells(index: number, obj?:Shell):Shell|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? (obj || new Shell()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

shellsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

localTransforms(index: number, obj?:Transform):Transform|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new Transform()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 48, this.bb!) : null;
}

localTransformsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

globalTransforms(index: number, obj?:Transform):Transform|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? (obj || new Transform()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 48, this.bb!) : null;
}

globalTransformsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

materialIds(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

materialIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

materialIdsArray():Uint32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? new Uint32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

representationIds(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

representationIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

representationIdsArray():Uint32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? new Uint32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

sampleIds(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

sampleIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

sampleIdsArray():Uint32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? new Uint32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

localTransformIds(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

localTransformIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

localTransformIdsArray():Uint32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? new Uint32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

globalTransformIds(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

globalTransformIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

globalTransformIdsArray():Uint32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? new Uint32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startMeshes(builder:flatbuffers.Builder) {
  builder.startObject(14);
}

static addCoordinates(builder:flatbuffers.Builder, coordinatesOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, coordinatesOffset, 0);
}

static addMeshesItems(builder:flatbuffers.Builder, meshesItemsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, meshesItemsOffset, 0);
}

static createMeshesItemsVector(builder:flatbuffers.Builder, data:number[]|Uint32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createMeshesItemsVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createMeshesItemsVector(builder:flatbuffers.Builder, data:number[]|Uint32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startMeshesItemsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSamples(builder:flatbuffers.Builder, samplesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, samplesOffset, 0);
}

static startSamplesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(16, numElems, 4);
}

static addRepresentations(builder:flatbuffers.Builder, representationsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, representationsOffset, 0);
}

static startRepresentationsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(32, numElems, 4);
}

static addMaterials(builder:flatbuffers.Builder, materialsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, materialsOffset, 0);
}

static startMaterialsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(6, numElems, 1);
}

static addCircleExtrusions(builder:flatbuffers.Builder, circleExtrusionsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, circleExtrusionsOffset, 0);
}

static createCircleExtrusionsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCircleExtrusionsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addShells(builder:flatbuffers.Builder, shellsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, shellsOffset, 0);
}

static createShellsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startShellsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLocalTransforms(builder:flatbuffers.Builder, localTransformsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, localTransformsOffset, 0);
}

static startLocalTransformsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(48, numElems, 8);
}

static addGlobalTransforms(builder:flatbuffers.Builder, globalTransformsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, globalTransformsOffset, 0);
}

static startGlobalTransformsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(48, numElems, 8);
}

static addMaterialIds(builder:flatbuffers.Builder, materialIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(9, materialIdsOffset, 0);
}

static createMaterialIdsVector(builder:flatbuffers.Builder, data:number[]|Uint32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createMaterialIdsVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createMaterialIdsVector(builder:flatbuffers.Builder, data:number[]|Uint32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startMaterialIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRepresentationIds(builder:flatbuffers.Builder, representationIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, representationIdsOffset, 0);
}

static createRepresentationIdsVector(builder:flatbuffers.Builder, data:number[]|Uint32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createRepresentationIdsVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createRepresentationIdsVector(builder:flatbuffers.Builder, data:number[]|Uint32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startRepresentationIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addSampleIds(builder:flatbuffers.Builder, sampleIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, sampleIdsOffset, 0);
}

static createSampleIdsVector(builder:flatbuffers.Builder, data:number[]|Uint32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createSampleIdsVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createSampleIdsVector(builder:flatbuffers.Builder, data:number[]|Uint32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startSampleIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLocalTransformIds(builder:flatbuffers.Builder, localTransformIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, localTransformIdsOffset, 0);
}

static createLocalTransformIdsVector(builder:flatbuffers.Builder, data:number[]|Uint32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createLocalTransformIdsVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createLocalTransformIdsVector(builder:flatbuffers.Builder, data:number[]|Uint32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startLocalTransformIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addGlobalTransformIds(builder:flatbuffers.Builder, globalTransformIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, globalTransformIdsOffset, 0);
}

static createGlobalTransformIdsVector(builder:flatbuffers.Builder, data:number[]|Uint32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createGlobalTransformIdsVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createGlobalTransformIdsVector(builder:flatbuffers.Builder, data:number[]|Uint32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startGlobalTransformIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endMeshes(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // coordinates
  builder.requiredField(offset, 6) // meshes_items
  builder.requiredField(offset, 8) // samples
  builder.requiredField(offset, 10) // representations
  builder.requiredField(offset, 12) // materials
  builder.requiredField(offset, 14) // circle_extrusions
  builder.requiredField(offset, 16) // shells
  builder.requiredField(offset, 18) // local_transforms
  builder.requiredField(offset, 20) // global_transforms
  return offset;
}

static createMeshes(builder:flatbuffers.Builder, coordinatesOffset:flatbuffers.Offset, meshesItemsOffset:flatbuffers.Offset, samplesOffset:flatbuffers.Offset, representationsOffset:flatbuffers.Offset, materialsOffset:flatbuffers.Offset, circleExtrusionsOffset:flatbuffers.Offset, shellsOffset:flatbuffers.Offset, localTransformsOffset:flatbuffers.Offset, globalTransformsOffset:flatbuffers.Offset, materialIdsOffset:flatbuffers.Offset, representationIdsOffset:flatbuffers.Offset, sampleIdsOffset:flatbuffers.Offset, localTransformIdsOffset:flatbuffers.Offset, globalTransformIdsOffset:flatbuffers.Offset):flatbuffers.Offset {
  Meshes.startMeshes(builder);
  Meshes.addCoordinates(builder, coordinatesOffset);
  Meshes.addMeshesItems(builder, meshesItemsOffset);
  Meshes.addSamples(builder, samplesOffset);
  Meshes.addRepresentations(builder, representationsOffset);
  Meshes.addMaterials(builder, materialsOffset);
  Meshes.addCircleExtrusions(builder, circleExtrusionsOffset);
  Meshes.addShells(builder, shellsOffset);
  Meshes.addLocalTransforms(builder, localTransformsOffset);
  Meshes.addGlobalTransforms(builder, globalTransformsOffset);
  Meshes.addMaterialIds(builder, materialIdsOffset);
  Meshes.addRepresentationIds(builder, representationIdsOffset);
  Meshes.addSampleIds(builder, sampleIdsOffset);
  Meshes.addLocalTransformIds(builder, localTransformIdsOffset);
  Meshes.addGlobalTransformIds(builder, globalTransformIdsOffset);
  return Meshes.endMeshes(builder);
}
}
