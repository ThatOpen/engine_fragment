// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { GeometryLines } from './geometry-lines.js';
import { GeometryRepresentation } from './geometry-representation.js';
import { GeometrySample } from './geometry-sample.js';
import { GeometryWall } from './geometry-wall.js';
import { Transform } from './transform.js';


export class Geometries {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Geometries {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsGeometries(bb:flatbuffers.ByteBuffer, obj?:Geometries):Geometries {
  return (obj || new Geometries()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsGeometries(bb:flatbuffers.ByteBuffer, obj?:Geometries):Geometries {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Geometries()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

samples(index: number, obj?:GeometrySample):GeometrySample|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new GeometrySample()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 8, this.bb!) : null;
}

samplesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

sampleIds(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

sampleIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

sampleIdsArray():Uint32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Uint32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

representations(index: number, obj?:GeometryRepresentation):GeometryRepresentation|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new GeometryRepresentation()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 8, this.bb!) : null;
}

representationsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

representationIds(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

representationIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

representationIdsArray():Uint32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? new Uint32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

transforms(index: number, obj?:Transform):Transform|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new Transform()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 48, this.bb!) : null;
}

transformsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

transformIds(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

transformIdsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

transformIdsArray():Uint32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? new Uint32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

representationsSamples(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

representationsSamplesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

representationsSamplesArray():Uint32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? new Uint32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

lines(index: number, obj?:GeometryLines):GeometryLines|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new GeometryLines()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

linesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

walls(index: number, obj?:GeometryWall):GeometryWall|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? (obj || new GeometryWall()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 36, this.bb!) : null;
}

wallsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startGeometries(builder:flatbuffers.Builder) {
  builder.startObject(9);
}

static addSamples(builder:flatbuffers.Builder, samplesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, samplesOffset, 0);
}

static startSamplesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 4);
}

static addSampleIds(builder:flatbuffers.Builder, sampleIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, sampleIdsOffset, 0);
}

static createSampleIdsVector(builder:flatbuffers.Builder, data:number[]|Uint32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createSampleIdsVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createSampleIdsVector(builder:flatbuffers.Builder, data:number[]|Uint32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startSampleIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRepresentations(builder:flatbuffers.Builder, representationsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, representationsOffset, 0);
}

static startRepresentationsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 4);
}

static addRepresentationIds(builder:flatbuffers.Builder, representationIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, representationIdsOffset, 0);
}

static createRepresentationIdsVector(builder:flatbuffers.Builder, data:number[]|Uint32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createRepresentationIdsVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createRepresentationIdsVector(builder:flatbuffers.Builder, data:number[]|Uint32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startRepresentationIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addTransforms(builder:flatbuffers.Builder, transformsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, transformsOffset, 0);
}

static startTransformsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(48, numElems, 8);
}

static addTransformIds(builder:flatbuffers.Builder, transformIdsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, transformIdsOffset, 0);
}

static createTransformIdsVector(builder:flatbuffers.Builder, data:number[]|Uint32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createTransformIdsVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createTransformIdsVector(builder:flatbuffers.Builder, data:number[]|Uint32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startTransformIdsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addRepresentationsSamples(builder:flatbuffers.Builder, representationsSamplesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(6, representationsSamplesOffset, 0);
}

static createRepresentationsSamplesVector(builder:flatbuffers.Builder, data:number[]|Uint32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createRepresentationsSamplesVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createRepresentationsSamplesVector(builder:flatbuffers.Builder, data:number[]|Uint32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt32(data[i]!);
  }
  return builder.endVector();
}

static startRepresentationsSamplesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addLines(builder:flatbuffers.Builder, linesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, linesOffset, 0);
}

static createLinesVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startLinesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addWalls(builder:flatbuffers.Builder, wallsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, wallsOffset, 0);
}

static startWallsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(36, numElems, 4);
}

static endGeometries(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  builder.requiredField(offset, 4) // samples
  builder.requiredField(offset, 8) // representations
  builder.requiredField(offset, 12) // transforms
  builder.requiredField(offset, 18) // lines
  return offset;
}

static createGeometries(builder:flatbuffers.Builder, samplesOffset:flatbuffers.Offset, sampleIdsOffset:flatbuffers.Offset, representationsOffset:flatbuffers.Offset, representationIdsOffset:flatbuffers.Offset, transformsOffset:flatbuffers.Offset, transformIdsOffset:flatbuffers.Offset, representationsSamplesOffset:flatbuffers.Offset, linesOffset:flatbuffers.Offset, wallsOffset:flatbuffers.Offset):flatbuffers.Offset {
  Geometries.startGeometries(builder);
  Geometries.addSamples(builder, samplesOffset);
  Geometries.addSampleIds(builder, sampleIdsOffset);
  Geometries.addRepresentations(builder, representationsOffset);
  Geometries.addRepresentationIds(builder, representationIdsOffset);
  Geometries.addTransforms(builder, transformsOffset);
  Geometries.addTransformIds(builder, transformIdsOffset);
  Geometries.addRepresentationsSamples(builder, representationsSamplesOffset);
  Geometries.addLines(builder, linesOffset);
  Geometries.addWalls(builder, wallsOffset);
  return Geometries.endGeometries(builder);
}
}
