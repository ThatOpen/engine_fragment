// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { FloatVector } from './float-vector.js';


export class GeometryWall {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):GeometryWall {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

start(obj?:FloatVector):FloatVector|null {
  return (obj || new FloatVector()).__init(this.bb_pos, this.bb!);
}

end(obj?:FloatVector):FloatVector|null {
  return (obj || new FloatVector()).__init(this.bb_pos + 12, this.bb!);
}

height():number {
  return this.bb!.readFloat32(this.bb_pos + 24);
}

mutate_height(value:number):boolean {
  this.bb!.writeFloat32(this.bb_pos + 24, value);
  return true;
}

width():number {
  return this.bb!.readFloat32(this.bb_pos + 28);
}

mutate_width(value:number):boolean {
  this.bb!.writeFloat32(this.bb_pos + 28, value);
  return true;
}

offset():number {
  return this.bb!.readFloat32(this.bb_pos + 32);
}

mutate_offset(value:number):boolean {
  this.bb!.writeFloat32(this.bb_pos + 32, value);
  return true;
}

static sizeOf():number {
  return 36;
}

static createGeometryWall(builder:flatbuffers.Builder, start_x: number, start_y: number, start_z: number, end_x: number, end_y: number, end_z: number, height: number, width: number, offset: number):flatbuffers.Offset {
  builder.prep(4, 36);
  builder.writeFloat32(offset);
  builder.writeFloat32(width);
  builder.writeFloat32(height);
  builder.prep(4, 12);
  builder.writeFloat32(end_z);
  builder.writeFloat32(end_y);
  builder.writeFloat32(end_x);
  builder.prep(4, 12);
  builder.writeFloat32(start_z);
  builder.writeFloat32(start_y);
  builder.writeFloat32(start_x);
  return builder.offset();
}

}
